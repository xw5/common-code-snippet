{
  "taronavigate": {
    "prefix": ["taronavigate", "navigate"],
    "body": [
      "Taro.${1|navigateTo,navigateBack,switchTab,reLaunch,redirectTo|}({",
      "  // navigationBack不需要",
      "  url: '${2:/pages/index/index}'",
      "  // navigateBack特有",
      "  delta: 1,  // 返回的页面数，如果 delta 大于现有页面数，则返回到首页。",
      "  // navigateTo特有",
      "  events: {",
      "    // 为指定事件添加一个监听器，获取被打开页面传送到当前页面的数据",
      "    acceptDataFromOpenedPage: function(data) {",
      "      console.log(data)",
      "    },",
      "    someEvent: function(data) {",
      "      console.log(data)",
      "    }",
      "  },",
      "  success(res) {",
      "    // 接口调用成功的回调函数",
      "    // navigateTo特有，配合上面events使用",
      "    res.eventChannel.emit('acceptDataFromOpenerPage', { data: 'test' });",
      "  },",
      "  fail() {",
      "    // 接口调用失败的回调函数",
      "  },",
      "  complete() {",
      "    // 接口调用结束的回调函数（调用成功、失败都会执行）",
      "  }",
      "})"
    ],
    "description": "taro的路由跳转api代码段"
  },

  "tarocliboard": {
    "prefix": ["tarocliboard", "cliboard"],
    "body": [
      "Taro.${1|setClipboardData,getClipboardData|}({",
      "  // setClipboardData特有",
      "  data: '${2:data}',",
      "  success(res) { ",
      "  },",
      "  fail(res) {",
      "  },",
      "  complete(res) {",
      "  }",
      "})"
    ],
    "description": "剪贴板操作api"
  },

  "tarosetstorage": {
    "prefix": ["tarosetstorage", "setstorage"],
    "body": [
      "Taro.setStorage({",
      "  key:\"${1:key}\",",
      "  data:\"${2:data}\",",
      "  success(res) {",
      "",
      "  },",
      "  fail() {",
      "    ",
      "  },",
      "  complete() {",
      "",
      "  }",
      "})"
    ],
    "description": "设置key:data本地缓存"
  },

  "tarogetstorage": {
    "prefix": ["tarogetstorage", "getstorage"],
    "body": [
      "Taro.getStorage({",
      "  key:\"${1:key}\",",
      "  success(res) {",
      "    console.log('--getStorage ${1:key}--', res.data)",
      "  },",
      "  fail() {",
      "    ",
      "  },",
      "  complete() {",
      "",
      "  }",
      "})"
    ],
    "description": "获取指定key的本地缓存"
  },
  
  "tarosetstoragesync": {
    "prefix": ["tarosetstoragesync", "setstoragesync"],
    "body": [
      "try {",
      "  Taro.setStorageSync('${1:key}', '${2:value}')",
      "} catch (e) { }"
    ],
    "description": "同步方式设置key:data本地缓存"
  },

  "tarogetstoragesync": {
    "prefix": ["tarogetstoragesync", "getstoragesync"],
    "body": [
      "try {",
      "  var value = Taro.getStorageSync('${1:key}')",
      "  if (value) {",
      "    console.log('--getStorage ${1:key}--:ok', value)",
      "  }",
      "} catch (e) {",
      "  console.log('--getStorage ${1:key}--:err', err)",
      "}"
    ],
    "description": "同步方式获取指定key的本地缓存"
  },

  "taroremovestoragesync": {
    "prefix": ["taroremovestoragesync", "removestoragesync"],
    "body": [
      "try {",
      "  Taro.removeStorageSync('${1:key}')",
      "} catch (err) {",
      "  console.log('--removeStorageSync ${1:key}--:err', err)",
      "}"
    ],
    "description": "同步方式删除指定key的本地缓存"
  },

  "taroremovestorage": {
    "prefix": ["taroremovestorage", "removestorage"],
    "body": [
      "Taro.removeStorage({",
      "  key:\"${1:key}\",",
      "  success(res) {",
      "    console.log('--removeStorage ${1:key}--', res.data)",
      "  },",
      "  fail() {",
      "    ",
      "  },",
      "  complete() {",
      "",
      "  }",
      "})"
    ],
    "description": "异常方式删除指定key的本地缓存"
  },
}