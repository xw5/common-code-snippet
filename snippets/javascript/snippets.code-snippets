{
  "jsvar": {
    "prefix": ["var", "jsvar"],
    "body": [
      "${1|const,let,var|} ${2:example} = ${3};"
    ],
    "description": "定义变量"
  },
  "jsfor": {
    "prefix": ["for","jsfor"],
    "body": [
      "for(let ${2:i}=0; i<${1:array}.length; ${2:i}++) {",
      "\tlet ${3:item} = ${1:array}[${2:i}];",
      "\t$0",
      "}"
    ],
    "description": "普通for循环"
  },

  "jsforof": {
    "prefix": ["forof","jsforof"],
    "body": [
      "for(${2:item} of ${1:obj}) {",
      "\t$0",
      "}"
    ],
    "description": "for-of循环,ES6新引入循环,较推荐的循环用法"
  },

  "jsforin": {
    "prefix": ["forin","jsforin"],
    "body": [
      "for(${2:key} in ${1:obj}) {",
      "\tlet ${3:item} = obj[${2:key}];",
      "\t$0",
      "}"
    ],
    "description": "for-in循环,并不适合用来遍历 Array 中的元素，其更适合遍历对象中的属性"
  },

  "jsif": {
    "prefix": ["if", "jsif"],
    "body": [
      "if (${1:condition}) {",
      "  $2",
      "}"
    ],
    "description": "js下if语句"
  },

  "jselse": {
    "prefix": ["else", "jselse"],
    "body": [
      "else {",
      "  $1",
      "}"
    ],
    "description": "js下的else语句"
  },

  "jselseif": {
    "prefix": ["elseif", "jselseif"],
    "body": [
      "else if (${1:条件}) {",
      "  $2",
      "}"
    ],
    "description": "js下的elseif语句"
  },

  "jsswitch": {
    "prefix": ["switch", "jsswitch"],
    "body": [
      "switch(${1:label}) {",
      "\tcase ${2:label}:",
      "\t\t${3:code}",
      "\t\tbreak;",
      "\tdefault:",
      "\t\t${4:code}",
      "}"
    ],
    "description": "js下的switch语句"
  },

  "jsfunction": {
    "prefix": ["function","jsfunction"],
    "body": [
      "/**",
      "* ${1:函数注释}",
      "* @param {${4|Number,String,Array,Object,Function|}} ${3:param} 函数参数",
      "*/",
      "function ${2:test}(${3:param}) {",
      "\t${0}",
      "}"
    ],
    "description": "js下的函数定义语句"
  },

  "jsfunctionnotes": {
    "prefix": ["functionnotes","jsfunctionnotes"],
    "body": [
      "/**",
      "* ${1:函数注释}",
      "* @param {${4|Number,String,Array,Object,Function|}} ${3:param} 函数参数",
      "*/"
    ],
    "description": "生成函数注释"
  },

  "jslog": {
    "prefix": ["log","jslog"],
    "body": [
      "console.${1|log,info,error|}($2);"
    ],
    "description": "js下console.log语句"
  },

  "jslog-": {
    "prefix": ["log-","jslog-"],
    "body": [
      "console.${1|log,info,error|}('---- $2 ----:', $3);"
    ],
    "description": "js下console.log语句"
  },

  "jsclass": {
    "prefix": ["class","jsclass"],
    "body": [
      "class ${1:Class} {",
      "\tconstructor(${2}) {",
      "\t\tsuper(${2})",
      "\t}",
      "\n",
      "\t${3:fn}() {",
      "\t}",
      "}"
    ],
    "description": "js下类的定义语句"
  },

  "jspromise": {
    "prefix": ["promise", "jspromise"],
    "body": [
      "new Promise((resolve, reject) => {",
      "\t$1",
      "\tif (${2:condition}){",
      "\t\tresolve(${3:val});",
      "\t} else {",
      "\t\treject(${3:err});",
      "\t}",
      "});"
    ],
    "description": "js下Promise语句"
  },

  "jsregex": {
    "prefix": ["regex", "jsregex"],
    "body": [
      "//用户名正则，4到16位（字母，数字，下划线，减号）",
      "/^[a-zA-Z0-9_-]{4,16}$/;",
      "//密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符",
      "/^.*(?=.{6,})(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*? ]).*$/",
      "//验证邮箱",
      "/^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/",
      "//验证手机号",
      "/^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\\d{8}$/",
      "//验证URL",
      "/^http(s?):\\/\\/.+\\./",
     "//验证身份证号码",
      "/(^\\d{15}$)|(^\\d{17}([0-9]|X|x)$)/",
      "//匹配中文字符的正则表达式",
      "/[\\u4e00-\\u9fa5]/",
      "//匹配双字节字符(包括汉字在内)",
      "/[^\\x00-\\xff]/",
      "//同内电话号码",
      "/\\d{3}-\\d{8}|\\d{4}-\\d{7}/"
    ],
    "description": "js下常用正则表达式集合"
  },

  "jstry": {
    "prefix": ["try","jstry"],
    "body": [
      "try {",
      "\t$1",
      "}",
      "catch(err){",
      "\t$2",
      "}"
    ],
    "description": "js下try catch语句"
  },

  "jsthrottle": {
    "prefix": ["jsthrottle","throttle","jsjl"],
    "body": [
      "/**",
      "* @desc 函数节流",
      "* @param func 函数",
      "* @param wait 延迟执行毫秒数",
      "* @param type 1 时间戳版，2 定时器版",
      "*/",
      "function throttle(func, wait, type = 1) {",
      "  let previous = Date.now(),",
      "  timeout=null;",
      "  return function() {",
      "    let context = this;",
      "    let args = arguments;",
      "    if (type === 1) {",
      "      let now = Date.now();",
      "      if (now - previous > wait) {",
      "        func.apply(context, args);",
      "        previous = now;",
      "      }",
      "    } else if (type === 2) {",
      "      if (!timeout) {",
      "        timeout = setTimeout(() => {",
      "          timeout = null;",
      "          func.apply(context, args)",
      "        }, wait)",
      "      }",
      "    }",
      "  }",
      "}",
      "${0}"
    ],
    "description": "js下节流代码段"
  },
  

  "jsdebounce": {
    "prefix": ["jsdebounce","debounce","jshd"],
    "body": [
      "/**",
      "* @desc 函数防抖",
      "* @param func 目标函数",
      "* @param wait 延迟执行毫秒数",
      "* @param immediate true - 立即执行， false - 延迟执行",
      "*/",
      "function debounce(func, wait = 300, immediate = true) {",
      "  let timer;",
      "  return function() {",
      "    let context = this,",
      "    args = arguments;",
      "    if (timer) clearTimeout(timer);",
      "    if (immediate && !timer) {",
      "      func.apply(context, args);",
      "    }",
      "    timer = setTimeout(() => {",
      "      func.apply(context, args)",
      "    }, wait)",
      "  }",
      "${0}"
    ],
    "description": "js下data代码段"
  },

  "jsstore": {
    "prefix": ["jsstore","store"],
    "body": [
      "import Vue from 'vue'",
      "import Vuex from 'vuex'",
      "",
      "Vue.use(Vuex);",
      "",
      "export default new Vuex.Store({",
        "\tstate: {",
        "\t},",
        "\tmutations: {",
        "\t},",
        "\tactions: {",
        "\t},",
        "\tgetters: {",
        "\t},",
        "\tmodules: {",
        "\t}",
      "})"
    ],
    "description": "vue状态管理主文件模板代码段"
  },

  "jsstoremodule": {
    "prefix": ["jsstoremodule","storemodule"],
    "body": [
      "const ${1:storeModule} = {",
        "namespaced: true,",
        "state: {",
        "},",
        "mutations: {",
        "},",
        "actions: {",
        "},",
        "getters: {",
        "}",
      "}",
      "export default ${1:storeModule};"
    ],
    "description": "vue状态管理module模板代码段"
  },

  "jsdialogdrag": {
    "prefix": ["jsdialogdrag","dialogdrag","饿了么弹窗拖拽","弹窗拖拽"],
    "body": [
      "import Vue from 'vue'",

      "// v-dialogDrag: 弹窗拖拽",
      "Vue.directive('dialogDrag', {",
        "\tbind(el, binding, vnode, oldVnode) {",
          "\t\tconst dialogHeaderEl = el.querySelector('.el-dialog__header');",
          "\t\tconst dragDom = el.querySelector('.el-dialog');",
          "\t\tdialogHeaderEl.style.cursor = 'move';",

          "\t\t// 获取原有属性 ie dom元素.currentStyle 火狐谷歌 window.getComputedStyle(dom元素, null);",
          "\t\tconst sty = dragDom.currentStyle || window.getComputedStyle(dragDom, null);",

          "\t\tdialogHeaderEl.onmousedown = (e) => {",
            "\t\t\t// 鼠标按下，计算当前元素距离可视区的距离",
            "\t\t\tconst disX = e.clientX - dialogHeaderEl.offsetLeft;",
            "\t\t\tconst disY = e.clientY - dialogHeaderEl.offsetTop;",

            "\t\t\t// 获取到的值带px 正则匹配替换",
            "\t\t\tlet styL, styT",

            "\t\t\t// 注意在ie中 第一次获取到的值为组件自带50% 移动之后赋值为px",
            "\t\t\tif (sty.left.includes('%')) {",
              "\t\t\t\tstyL = +document.body.clientWidth * (+sty.left.replace(/\\%/g, '') / 100);",
              "\t\t\t\tstyT = +document.body.clientHeight * (+sty.top.replace(/\\%/g, '') / 100);",
            "\t\t\t} else {",
              "\t\t\t\tstyL = +sty.left.replace(/\\px/g, '');",
              "\t\t\t\tstyT = +sty.top.replace(/\\px/g, '');",
            "\t\t\t}",
            "\t\t\tconsole.log('--dialogHeaderEl--:0', styL, styT);",

            "\t\t\tdocument.onmousemove = function(e) {",
              "\t\t\t\t// 通过事件委托，计算移动的距离",
              "\t\t\t\tconst l = e.clientX - disX;",
              "\t\t\t\tconst t = e.clientY - disY;",

              "\t\t\t\t// 移动当前元素",
              "\t\t\t\tdragDom.style.left = `${l + styL}px`;",
              "\t\t\t\tdragDom.style.top = `${t + styT}px`;",

              "\t\t\t\t// 将此时的位置传出去",
              "\t\t\t\t// binding.value({x:e.pageX,y:e.pageY})",
            "\t\t\t}",

            "\t\t\tdocument.onmouseup = function(e) {",
              "\t\t\t\tdocument.onmousemove = null",
              "\t\t\t\tdocument.onmouseup = null",
            "\t\t\t}",
          "\t\t}",
        "\t}",
      "});"
    ],
    "description": "el弹窗拖拽指令"
  },
  
"jsrem": {
  "prefix": ["jsrem", "rem"],
  "body": [
    "(function(doc, win) {",
    "  var docEl = doc.documentElement,",
    "  resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',",
    "  getFontSize = function() {",
    "    var fontSize = 0;",
    "    if (document.documentElement.currentStyle) {",
    "      fontSize = document.documentElement.currentStyle.fontSize;",
    "    }",
    "    if (window.getComputedStyle) {",
    "      fontSize = window.getComputedStyle(document.documentElement, false).fontSize;",
    "    }",
    "    return parseFloat(fontSize);",
    "  },",
    "  recalc = function() {",
    "    var clentWidth = docEl.clientWidth;",
    "    var container = doc.getElementById('app');",
    "    // 最大显示540宽",
    "    if (clentWidth >= 540) {",
    "      docEl.style.fontSize = '50px';",
    "      container.style.width = '540px';",
    "    } else {",
    "      var remFontSize = clentWidth / 10.8;",
    "      docEl.style.fontSize = remFontSize + 'px';",
    "      container.style.width = 'auto';",
    "      // 修正系统字体调整造成的布局问题",
    "      var realitySize = getFontSize();",
    "      if (realitySize && parseInt(remFontSize) !== parseInt(realitySize)) {",
    "        remFontSize = remFontSize * remFontSize / realitySize;",
    "        docEl.style.fontSize = remFontSize + 'px';",
    "      }",
    "    }",
    "  };",
    "  if (!doc.addEventListener) return;",
    "  win.addEventListener(resizeEvt, recalc, false);",
    "  doc.addEventListener('DOMContentLoaded', recalc, false);",
    "})(document, window);"
  ],
  "description": "移动端rem适配"
}

  "jsusestatefunction": {
    "prefix": ["jsusestatefunction", "usestatefunction"],
    "body": [
      "const [${1:state}, set${1:state}] = useState(() => {",
      "  return ${3:initialState};",
      "});"
    ],
    "description": "usestate函数形式片段"
  },

  "jsimport": {
    "prefix": ["import", "jsimport"],
    "body": [
      "import { ${1:example}} from '${2}';"
    ],
    "description": "import语句"
  },
  "jsimportdefault": {
    "prefix": ["importdefault", "jsimportdefault"],
    "body": [
      "import ${1:example} from '${2}';"
    ],
    "description": "importdefault"
  },
  "jscsfn": {
    "prefix": ["csfn", "jscsfn","常量函数"],
    "body": [
      "const ${1:example} = (${2}) => {",
      "  ${3}",
      "}"
    ],
    "description": "js const定义箭头函数"
  },

  "js?": {
    "prefix": ["js?", "js3m","三目运算"],
    "body": [
      "${1:example} ? ${2:example} : ${3:example}"
    ],
    "description": "js 三目运算代码段"
  },
 
  "jsArraymethod": {
    "prefix": ["jsarraymethod","arraymethod","jsarray","array"],
    "body": [
      "// https://www.runoob.com/jsref/jsref-obj-array.html",
      "// concat() 连接两个或更多的数组，并返回结果。",
      "// entries() 返回数组的可迭代对象。",
      "// every() 检测数值元素的每个元素是否都符合条件。",
      "// fill() 使用一个固定值来填充数组。",
      "// filter() 检测数值元素，并返回符合条件所有元素的数组。",
      "// find() 返回符合传入测试（函数）条件的数组元素。",
      "// findIndex() 返回符合传入测试（函数）条件的数组元素索引。",
      "// forEach() 数组每个元素都执行一次回调函数。",
      "// includes() 判断一个数组是否包含一个指定的值。",
      "// indexOf() 搜索数组中的元素，并返回它所在的位置。",
      "// isArray() 判断对象是否为数组。",
      "// join() 把数组的所有元素放入一个字符串。",
      "// keys() 返回数组的可迭代对象，包含原始数组的键(key)。",
      "// map() 通过指定函数处理数组的每个元素，并返回处理后的数组。",
      "// pop() 删除数组的最后一个元素并返回删除的元素。",
      "// push() 向数组的末尾添加一个或更多元素，并返回新的长度。",
      "// reduce() 将数组元素计算为一个值（从左到右）。",
      "// reduceRight() 将数组元素计算为一个值（从右到左）。",
      "// reverse() 反转数组的元素顺序。",
      "// shift() 删除并返回数组的第一个元素。",
      "// slice() 选取数组的一部分，并返回一个新数组。",
      "// some() 检测数组元素中是否有元素符合指定条件。",
      "// sort() 对数组的元素进行排序。",
      "// splice() 从数组中添加或删除元素。",
      "// toString() 把数组转换为字符串，并返回结果。",
      "// unshift() 向数组的开头添加一个或更多元素，并返回新的长度。",
      "// from() 通过给定的对象中创建一个数组。",
      "// lastIndexOf() 搜索数组中的元素，并返回它最后出现的位置。",
      "// copyWithin() 从数组的指定位置拷贝元素到数组的另一个指定位置中。",
      "// valueOf() 返回数组对象的原始值。",
    ],
    "description": "Array常用方法列表"
  },
  
  "jsStringMethod": {
    "prefix": ["jsstringmethod", "stringmethod", "jsstring", "string"],
    "body": [
      "// https://www.runoob.com/jsref/jsref-obj-string.html",
      "// charAt() 返回在指定位置的字符。",
      "// charCodeAt() 返回在指定的位置的字符的 Unicode 编码。",
      "// concat() 连接两个或更多字符串，并返回新的字符串。",
      "// indexOf() 返回某个指定的字符串值在字符串中首次出现的位置。",
      "// includes() 查找字符串中是否包含指定的子字符串。",
      "// lastIndexOf() 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置。",
      "// match() 查找找到一个或多个正则表达式的匹配。",
      "// repeat() 复制字符串指定次数，并将它们连接在一起返回。",
      "// replace() 在字符串中查找匹配的子串，并替换与正则表达式匹配的子串。",
      "// replaceAll() 在字符串中查找匹配的子串，并替换与正则表达式匹配的所有子串。",
      "// search() 查找与正则表达式相匹配的值。",
      "// slice() 提取字符串的片断，并在新的字符串中返回被提取的部分。",
      "// split() 把字符串分割为字符串数组。",
      "// endsWith() 判断当前字符串是否是以指定的子字符串结尾的（区分大小写）。",
      "// startsWith() 查看字符串是否以指定的子字符串开头。",
      "// substr() 从起始索引号提取字符串中指定数目的字符。",
      "// substring() 提取字符串中两个指定的索引号之间的字符。",
      "// toLowerCase() 把字符串转换为小写。",
      "// toUpperCase() 把字符串转换为大写。",
      "// trim() 去除字符串两边的空白。",
      "// toLocaleLowerCase() 根据本地主机的语言环境把字符串转换为小写。",
      "// toLocaleUpperCase() 根据本地主机的语言环境把字符串转换为大写。",
      "// fromCharCode() 将 Unicode 编码转为字符。",
      "// valueOf() 返回某个字符串对象的原始值。",
      "// toString() 返回一个字符串。"
    ],
    "description": "String常用方法列表"
  },

  "jsMathMethod": {
    "prefix": ["jsmathmethod", "mathmethod", "jsmath", "math"],
    "body": [
      "// https://www.runoob.com/jsref/jsref-obj-math.html",
      "// abs(x) 返回 x 的绝对值。",
      "// acos(x) 返回 x 的反余弦值。",
      "// asin(x) 返回 x 的反正弦值。",
      "// atan(x) 以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。",
      "// atan2(y,x) 返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）。",
      "// ceil(x) 对数进行上舍入。",
      "// cos(x) 返回数的余弦。",
      "// exp(x) 返回 Ex 的指数。",
      "// floor(x) 对 x 进行下舍入。",
      "// log(x) 返回数的自然对数（底为e）。",
      "// max(x,y,z,...,n) 返回 x,y,z,...,n 中的最高值。",
      "// min(x,y,z,...,n) 返回 x,y,z,...,n中的最低值。",
      "// pow(x,y) 返回 x 的 y 次幂。",
      "// random() 返回 0 ~ 1 之间的随机数。",
      "// round(x) 四舍五入。",
      "// sin(x) 返回数的正弦。",
      "// sqrt(x) 返回数的平方根。",
      "// tan(x) 返回角的正切。",
      "// tanh(x) 返回一个数的双曲正切函数值。",
      "// trunc(x) 将数字的小数部分去掉，只保留整数部分。"
    ],
    "description": "Math对象常用方法"
  },

  "jsDateMethod": {
    "prefix": ["jsdatemethod", "datemethod", "jsdate", "date"],
    "body": [
      "// https://www.runoob.com/jsref/jsref-obj-date.html",
      "// getDate() 从 Date 对象返回一个月中的某一天 (1 ~ 31)。",
      "// getDay() 从 Date 对象返回一周中的某一天 (0 ~ 6)。",
      "// getFullYear() 从 Date 对象以四位数字返回年份。",
      "// getHours() 返回 Date 对象的小时 (0 ~ 23)。",
      "// getMilliseconds() 返回 Date 对象的毫秒(0 ~ 999)。",
      "// getMinutes() 返回 Date 对象的分钟 (0 ~ 59)。",
      "// getMonth() 从 Date 对象返回月份 (0 ~ 11)。",
      "// getSeconds() 返回 Date 对象的秒数 (0 ~ 59)。",
      "// getTime() 返回 1970 年 1 月 1 日至今的毫秒数。",
      "// getTimezoneOffset() 返回本地时间与格林威治标准时间 (GMT) 的分钟差。",
      "// getUTCDate() 根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。",
      "// getUTCDay() 根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。",
      "// getUTCFullYear() 根据世界时从 Date 对象返回四位数的年份。",
      "// getUTCHours() 根据世界时返回 Date 对象的小时 (0 ~ 23)。",
      "// getUTCMilliseconds() 根据世界时返回 Date 对象的毫秒(0 ~ 999)。",
      "// getUTCMinutes() 根据世界时返回 Date 对象的分钟 (0 ~ 59)。",
      "// getUTCMonth() 根据世界时从 Date 对象返回月份 (0 ~ 11)。",
      "// getUTCSeconds() 根据世界时返回 Date 对象的秒钟 (0 ~ 59)。",
      "// parse() 返回1970年1月1日午夜到指定日期（字符串）的毫秒数。",
      "// setDate() 设置 Date 对象中月的某一天 (1 ~ 31)。",
      "// setFullYear() 设置 Date 对象中的年份（四位数字）。",
      "// setHours() 设置 Date 对象中的小时 (0 ~ 23)。",
      "// setMilliseconds() 设置 Date 对象中的毫秒 (0 ~ 999)。",
      "// setMinutes() 设置 Date 对象中的分钟 (0 ~ 59)。",
      "// setMonth() 设置 Date 对象中月份 (0 ~ 11)。",
      "// setSeconds() 设置 Date 对象中的秒钟 (0 ~ 59)。",
      "// setTime() setTime() 方法以毫秒设置 Date 对象。",
      "// setUTCDate() 根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。",
      "// setUTCFullYear() 根据世界时设置 Date 对象中的年份（四位数字）。",
      "// setUTCHours() 根据世界时设置 Date 对象中的小时 (0 ~ 23)。",
      "// setUTCMilliseconds() 根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。",
      "// setUTCMinutes() 根据世界时设置 Date 对象中的分钟 (0 ~ 59)。",
      "// setUTCMonth() 根据世界时设置 Date 对象中的月份 (0 ~ 11)。",
      "// setUTCSeconds() setUTCSeconds() 方法用于根据世界时 (UTC) 设置指定时间的秒字段。",
      "// toDateString() 把 Date 对象的日期部分转换为字符串。",
      "// toISOString() 使用 ISO 标准返回字符串的日期格式。",
      "// toJSON() 以 JSON 数据格式返回日期字符串。",
      "// toLocaleDateString() 根据本地时间格式，把 Date 对象的日期部分转换为字符串。",
      "// toLocaleTimeString() 根据本地时间格式，把 Date 对象的时间部分转换为字符串。",
      "// toLocaleString() 根据本地时间格式，把 Date 对象转换为字符串。",
      "// toString() 把 Date 对象转换为字符串。",
      "// toTimeString() 把 Date 对象的时间部分转换为字符串。",
      "// toUTCString() ",
      "  // 根据世界时，把 Date 对象转换为字符串。",
      "  // 实例：",
      "  // var today = new Date();",
      "  // var UTCstring = today.toUTCString();",
      "// UTC() 根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。",
      "// valueOf() 返回 Date 对象的原始值。"
    ],
    "description": "Date常用方法"
  },
  
  "jsLocation": {
    "prefix": ["jslocation", "location"],
    "body": [
      "// hash 返回一个URL的锚部分",
      "// host 返回一个URL的主机名和端口",
      "// hostname 返回URL的主机名",
      "// href 返回完整的URL",
      "// pathname 返回的URL路径名。",
      "// port 返回一个URL服务器使用的端口号",
      "// protocol 返回一个URL协议",
      "// search 返回一个URL的查询部分",
      "// assign() 载入一个新的文档",
      "// reload() 重新载入当前文档",
      "// replace() 用新的文档替换当前文档"
    ],
    "description": "Location对象属性和方法"
  },

  "jsHistory": {
    "prefix": ["jshistory", "history"],
    "body": [
      "// length 返回历史列表中的网址数",
      "// back() 加载 history 列表中的前一个 URL",
      "// forward() 加载 history 列表中的下一个 URL",
      "// go() 加载 history 列表中的某个具体页面"
    ],
    "description": "History对象方法"
  },

  "jsDom": {
    "prefix": ["jsdom", "dom"],
    "body": [
      "// element.appendChild() 为元素添加一个新的子元素",
      "// element.attributes 返回一个元素的属性数组",
      "// element.childNodes 返回元素的一个子节点的数组，包含文本节点",
      "// element.children 返回元素的子元素的集合",
      "// element.classList 返回元素的类名，作为 DOMTokenList 对象。",
      "// element.className 设置或返回元素的class属性",
      "// element.clientTop 表示一个元素的顶部边框的宽度，以像素表示。",
      "// element.clientLeft 表示一个元素的左边框的宽度，以像素表示。",
      "// element.clientHeight 在页面上返回内容的可视高度（高度包含内边距（padding），不包含边框（border），外边距（margin）和滚动条）",
      "// element.clientWidth 在页面上返回内容的可视宽度（宽度包含内边距（padding），不包含边框（border），外边距（margin）和滚动条）",
      "// element.cloneNode() 克隆某个元素",
      "// element.compareDocumentPosition() 比较两个元素的文档位置。",
      "// element.contentEditable 设置或返回元素的内容是否可编辑",
      "// element.dir 设置或返回一个元素中的文本方向",
      "// element.firstElementChild 返回元素的第一个子元素",
      "// element.firstChild 返回元素的第一个子节点",
      "// element.focus() 设置文档或元素获取焦点",
      "// element.getAttribute() 返回指定元素的属性值",
      "// element.getElementsByTagName() 返回指定标签名的所有子元素集合。",
      "// element.getElementsByClassName() 返回文档中所有指定类名的元素集合，作为 NodeList 对象。",
      "// element.hasAttribute() 如果元素中存在指定的属性返回 true，否则返回false。",
      "// element.hasAttributes() 如果元素有任何属性返回true，否则返回false。",
      "// element.hasChildNodes() 返回一个元素是否具有任何子元素",
      "// element.hasFocus() 返回布尔值，检测文档或元素是否获取焦点",
      "// element.id 设置或者返回元素的 id。",
      "// element.innerHTML 设置或者返回元素的内容。",
      "// element.insertBefore() 现有的子元素之前插入一个新的子元素",
      "// element.isContentEditable 如果元素内容可编辑返回 true，否则返回false",
      "// element.isSupported() 如果在元素中支持指定特征返回 true。",
      "// element.lang 设置或者返回一个元素的语言。",
      "// element.lastChild 返回最后一个子节点",
      "// element.lastElementChild 返回指定元素的最后一个子元素",
      "// element.matches() 如果元素匹配指定的 CSS 选择器，matches() 方法就返回 true，否则返回 false。",
      "// element.namespaceURI 返回命名空间的 URI。",
      "// element.nextSibling 返回该元素紧跟的一个节点",
      "// element.nextElementSibling 返回指定元素之后的下一个兄弟元素（相同节点树层中的下一个元素节点）。",
      "// element.nodeName 返回元素的标记名（大写）",
      "// element.nodeType 返回元素的节点类型",
      "// element.nodeValue 返回元素的节点值",
      "// element.normalize() 使得此成为一个\"normal\"的形式，其中只有结构（如元素，注释，处理指令，CDATA节和实体引用）隔开Text节点，即元素（包括属性）下面的所有文本节点，既没有相邻的文本节点也没有空的文本节点",
      "// element.offsetHeight 返回任何一个元素的高度包括边框（border）和内边距（padding），但不包含外边距（margin）",
      "// element.offsetWidth 返回元素的宽度，包括边框（border）和内边距（padding），但不包含外边距（margin）",
      "// element.offsetLeft 返回当前元素的相对水平偏移位置的偏移容器",
      "// element.offsetParent 返回元素的偏移容器",
      "// element.offsetTop 返回当前元素的相对垂直偏移位置的偏移容器",
      "// element.ownerDocument 返回元素的根元素（文档对象）",
      "// element.parentNode 返回元素的父节点",
      "// element.previousSibling 返回某个元素紧接之前元素",
      "// element.previousElementSibling 返回指定元素的前一个兄弟元素（相同节点树层中的前一个元素节点）。",
      "// element.querySelector() 返回匹配指定 CSS 选择器元素的第一个子元素",
      "// element.querySelectorAll() 返回匹配指定 CSS 选择器元素的所有子元素节点列表",
      "// element.removeAttribute() 从元素中删除指定的属性",
      "// element.removeAttributeNode() 删除指定属性节点并返回移除后的节点。",
      "// element.removeChild() 删除一个子元素",
      "// element.removeEventListener() 移除由 addEventListener() 方法添加的事件句柄",
      "// element.replaceChild() 替换一个子元素",
      "// element.scrollHeight 返回整个元素的高度（包括带滚动条的隐蔽的地方）",
      "// element.scrollLeft 返回当前视图中的实际元素的左边缘和左边缘之间的距离",
      "// element.scrollTop 返回当前视图中的实际元素的顶部边缘和顶部边缘之间的距离",
      "// element.scrollWidth 返回元素的整个宽度（包括带滚动条的隐蔽的地方）",
      "// element.setAttribute() 设置或者改变指定属性并指定值。",
      "// element.setAttributeNode() 设置或者改变指定属性节点。",
      "// element.style 设置或返回元素的样式属性",
      "// element.tabIndex 设置或返回元素的标签顺序。",
      "// element.tagName 作为一个字符串返回某个元素的标记名（大写）",
      "// element.textContent 设置或返回一个节点和它的文本内容",
      "// element.title 设置或返回元素的title属性",
      "// element.toString() 一个元素转换成字符串",
      "// nodelist.item() 返回某个元素基于文档树的索引",
      "// nodelist.length 返回节点列表的节点数目。"
    ],
    "description": "Dom元素对象"
  },

  "jsmobile": {
    "prefix": ["jsmobile","mobile","判断是移动端","移动端"],
    "body": [
      "// 当前设备是移动设备",
      "if (/Mobi|Android|iPhone/i.test(navigator.userAgent)) {",
      "  ",
      "};",
      "",
      "// 手机浏览器的 DOM 元素可以通过ontouchstart属性，为touch事件指定监听函数。桌面设备没有这个属性",
      "function isMobile() { ",
      "  return ('ontouchstart' in document.documentElement); ",
      "};",
      "// 也可以使用别人写好的工具包。这里推荐 react-device-detect，它支持多种粒度的设备侦测",
      "",
      "// 根据屏幕大小判断",
      "if (window.screen.width < 500) {",
      "   ",
      "};",
      "// 适合指定网页在不同宽度下的样式",
      "const getBrowserWidth = function() {",
      "  if (window.innerWidth < 768) {",
      "    return \"xs\";",
      "  } else if (window.innerWidth < 991) {",
      "    return \"sm\";",
      "  } else if (window.innerWidth < 1199) {",
      "    return \"md\";",
      "  } else {",
      "    return \"lg\";",
      "  }",
      "};"
    ],
    "description": "js判断当前是否在移动端下"
  },

  "jsrandom": {
    "prefix": ["jsrandom", "random","区间内随机整数","随机整数"],
    "body": [
      "const randomInteger = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;"
    ],
    "description": "js生成随机范围内的整数"
  },

  "jstype": {
    "prefix": ["jstype", "type","获取数据类型","数据类型"],
    "body": [
      "const getType = v => v === undefined ? 'undefined' : v === null ? 'null' : v.constructor.name.toLowerCase();"
    ],
    "description": "检查JavaScript中任何变量或值的类型"
  },

  "jsurlquery": {
    "prefix": ["jsurlquery", "urlquery","url参数获取"],
    "body": [
      "/**",
      " * 获取url中query参数",
      " * @param {String} sKey ",
      " * @param {String} sUrl ",
      " * @returns ",
      " */",
      "function getUrlParam2(sKey, sUrl) {",
      "  var result, Oparam = {}, tempurl;",
      "  tempurl = sUrl ? sUrl : window.location.href",
      "  tempurl.replace(/[\\?&]?(\\w+)=(\\w+)/g, function (\\$0, \\$1, \\$2) {",
      "    console.log('\\$0:' + \\$0 + \"     \\$1:\" + \\$1 + \"     \\$2:\" + \\$2);",
      "    Oparam[\\$1] === void 0 ? Oparam[\\$1] = \\$2 : Oparam[\\$1] = [].concat(Oparam[\\$1], \\$2);",
      "  });",
      "  sKey === void 0 || sKey === '' ? result = Oparam : result = Oparam[sKey] || '';",
      "  return result;",
      "}"
    ],
    "description": "获取url中的query参数"
  },

  "jsadd": {
    "prefix": ["jsadd", "add", "jsnum+","精确加法","加法"],
    "body": [
      "/**",
      " * @description 加法精确计算，避免数据相加小数点后产生多位数和计算精度损失",
      " * @param { Number } num1 加数1",
      " * @param { Number } num2 加数2",
      " * @return { Number } 相加结果",
      " */",
      "function numAdd(num1, num2) {",
      "  var baseNum = 0,",
      "      baseNum1 = 0,",
      "      baseNum2 = 0;",
      "  try {",
      "    baseNum1 = num1.toString().split(\".\")[1].length;",
      "  } catch (e) {",
      "    baseNum1 = 0;",
      "  }",
      "  try {",
      "    baseNum2 = num2.toString().split(\".\")[1].length;",
      "  } catch (e) {",
      "    baseNum2 = 0;",
      "  }",
      "  baseNum = Math.pow(10, Math.max(baseNum1, baseNum2));",
      "  return (num1 * baseNum + num2 * baseNum) / baseNum;",
      "}"
    ],
    "description": "加法精确计算，避免数据相加小数点后产生多位数和计算精度损失，关键字：jsadd, add, jsnum+"
  },

  "jssub": {
    "prefix": ["jssub", "sub", "jsnum-","精确减法","减法"],
    "body": [
      "/**",
      " * @description 减法精确计算，避免数据相减小数点后产生多位数和计算精度损失",
      " * @param { Number } num1 被减数",
      " * @param { Number } num2 减数2",
      " * @return { String } 相减结果",
      " */",
      "function numSub(num1, num2) {",
      "  var baseNum = 0,",
      "      baseNum1 = 0,",
      "      baseNum2 = 0;",
      "  var precision = 0; // 精度",
      "  try {",
      "    baseNum1 = num1.toString().split(\".\")[1].length;",
      "  } catch (e) {",
      "    baseNum1 = 0;",
      "  }",
      "  try {",
      "    baseNum2 = num2.toString().split(\".\")[1].length;",
      "  } catch (e) {",
      "    baseNum2 = 0;",
      "  }",
      "  baseNum = Math.pow(10, Math.max(baseNum1, baseNum2));",
      "  precision = baseNum1 >= baseNum2 ? baseNum1 : baseNum2;",
      "  return ((num1 * baseNum - num2 * baseNum) / baseNum).toFixed(precision);",
      "}"
    ],
    "description": "减法精确计算，避免数据相减小数点后产生多位数和计算精度损失,关键字：jssub, sub, jsnum-"
  },

  "jsmulti": {
    "prefix": ["jsmulti","jsmulti","jsnum*","精确乘法","乘法"],
    "body": [
      "/**",
      " * @description 乘法精确计算，避免数据相乘小数点后产生多位数和计算精度损失",
      " * @param { Number } num1 被乘数",
      " * @param { Number } num2 乘数",
      " * @return { Number } 相乘结果",
      " */",
      "function numMulti(num1, num2) {",
      "  var baseNum = 0;",
      "  try {",
      "    baseNum += num1.toString().split(\".\")[1].length;",
      "  } catch (e) {}",
      "  try {",
      "    baseNum += num2.toString().split(\".\")[1].length;",
      "  } catch (e) {}",
      "  return Number(num1.toString().replace(\".\", \"\")) * Number(num2.toString().replace(\".\", \"\")) / Math.pow(10, baseNum);",
      "}"
    ],
    "description": "乘法精确计算，避免数据相乘小数点后产生多位数和计算精度损失,  关键字：jsmulti,jsmulti,jsnum*"
  },

  "jsdiv": {
    "prefix": ["jsdiv", "div", "jsnum/","精确除法","除法"],
    "body": [
      "/**",
      " * @description 除法精确计算，避免数据相除小数点后产生多位数和计算精度损失",
      " * @param { Number } num1 被除数",
      " * @param { Number } num2 除数2",
      " * @return { Number } 相除结果",
      " */",
      "function numDiv(num1, num2) {",
      "  var t1 = 0,",
      "      t2 = 0,",
      "      r1 = 0,",
      "      r2 = 0;",
      "  try {",
      "    t1 = num1.toString().split(\".\")[1].length;",
      "  } catch (e) {}",
      "  try {",
      "    t2 = num2.toString().split(\".\")[1].length;",
      "  } catch (e) {}",
      "  r1 = Number(num1.toString().replace(\".\", \"\"));",
      "  r2 = Number(num2.toString().replace(\".\", \"\"));",
      "  return r1 / r2 * Math.pow(10, t2 - t1);",
      "}"
    ],
    "description": "除法精确计算，避免数据相除小数点后产生多位数和计算精度损失,  关键字：jsdiv, div, jsnum/"
  },
  
  "jstimeformat": {
    "prefix": ["jstimeformat", "timeformat","日期格式化"],
    "body": [
      "/**",
      " * @description 时间戳转日期",
      " * @param { Number, String } timestamp 时间戳",
      " * @param { String } fmt 转换后的日期格式，如：\"YYYYMMDD\"、\"YYYY/MM/DD\"、\"YYYY-MM-DD hh:mm:ss\"、\"YYYY年MM月dd日\"、\"YYY-MM-DD\"等等",
      " * @return { String } 转换后的日期",
      " */",
      "function timestampToTime(timestamp, fmt) {",
      "  const re = /(Y+)/;",
      "  const date = new Date(timestamp);",
      "  if (re.test(fmt)) {",
      "    const t = re.exec(fmt)[1];",
      "    fmt = fmt.replace(",
      "      t,",
      "      (date.getFullYear() + \"\").substring(4 - t.length)",
      "    );",
      "  }",
      "",
      "  const o = {",
      "    \"M+\": date.getMonth() + 1, // 月份",
      "    \"D+\": date.getDate(), // 日",
      "    \"h+\": date.getHours(), // 小时",
      "    \"m+\": date.getMinutes(), // 分",
      "    \"s+\": date.getSeconds(), // 秒",
      "    \"q+\": Math.floor((date.getMonth() + 3) / 3), // 季度",
      "    S: date.getMilliseconds(), // 毫秒",
      "  };",
      "  for (let k in o) {",
      "    const regx = new RegExp(\"(\" + k + \")\");",
      "    if (regx.test(fmt)) {",
      "      const t = regx.exec(fmt)[1];",
      "      fmt = fmt.replace(",
      "        t,",
      "        t.length == 1 ? o[k] : (\"00\" + o[k]).substr((\"\" + o[k]).length)",
      "      );",
      "    }",
      "  }",
      "  return fmt;",
      "};"
    ],
    "description": "时间戳转日期,  关键字：jstimeformat, timeformat"
  },
  
  "jsurlquerytoobj": {
    "prefix": ["jsurlquerytoobj", "urlquerytoobj","url参数转对象"],
    "body": [
      "/**",
      " * @description url参数转对象",
      " * @param { String } url url地址",
      " * @return { Object } 转换后的对象",
      " */",
      "function parseQueryString(url) {",
      "  url = url == undefined ? window.location.href : url;",
      "  var separateIndex = url.lastIndexOf('?');",
      "  var search = separateIndex === -1 ? '' : url.substring(url.lastIndexOf('?') + 1);",
      "  if (!search) {",
      "    return {};",
      "  }",
      "  return JSON.parse('{\"' + decodeURIComponent(search).replace(/\"/g, '\\\"').replace(/&/g, '\",\"').replace(/=/g, '\":\"') + '\"}');",
      "}"
    ],
    "description": "url参数转对象"
  },

  "jsobjtourlstring": {
    "prefix": ["jsobjtourlstring", "objtourlstring","对象转url参数"],
    "body": [
      "/**",
      " * @description 对象转化为querystring",
      " * @param { Object } obj 设置参数的对象",
      " * @return { String } 参数的字符串",
      " */",
      " function objToUrlQuery(obj) {",
      "  var _rs = [];",
      "  for (var p in obj) {",
      "    if (obj[p] != null && obj[p] != '') {",
      "      _rs.push(p + '=' + obj[p]);",
      "    }",
      "  }",
      "  return _rs.join('&');",
      "}"
    ],
    "description": "对象转化为querystring"
  },
  
  "jscountdown": {
    "prefix": ["jscountdown", "countdown", "倒计时"],
    "body": [
      "/**",
      " * @description 获取到某一个时间的倒计时对象",
      " * @param { String } endTime 结束时间",
      " * @return { Object } 倒计时",
      " */",
      "function getCountTime(endTime) {",
      "  var startDate = Date.now(); // 开始时间，当前时间",
      "  var endDate = new Date(endTime); // 结束时间，需传入时间参数",
      "  var t = endDate.getTime() - startDate; // 时间差的毫秒数",
      "  var days = 0,",
      "      hours = 0,",
      "      minutes = 0,",
      "      seconds = 0;",
      "  if (t >= 0) {",
      "    days = Math.floor(t / 1000 / 3600 / 24);",
      "    hours = Math.floor(t / 1000 / 60 / 60 % 24);",
      "    minutes = Math.floor(t / 1000 / 60 % 60);",
      "    seconds = Math.floor(t / 1000 % 60);",
      "  }",
      "  return {",
      "    days: days,",
      "    hours: hours,",
      "    minutes: minutes,",
      "    seconds: seconds",
      "  };",
      "}"
    ],
    "description": "获取到某一个时间的倒计时对象"
  },

  "jsleapyear": {
    "prefix": ["jsleapyear", "leapyear", "jsyear", "year","闰年"],
    "body": [
      "/**",
      " * @description 是否闰年",
      " * @param { Number } year 年份",
      " * @return { Boolean } 是否闰年",
      " */",
      "function leapYear(year) {",
      "  year = year === undefined ? new Date().getFullYear() : year;",
      "  return year % 4 === 0 && year % 100 !== 0 || year % 400 === 0;",
      "}"
    ],
    "description": "是否闰年"
  },

  "jsrandomcolor": {
    "prefix": ["jsrandomcolor", "randomcolor"],
    "body": [
      "/**",
      " * @description 随机生成颜色",
      " * @return { String } 生成颜色的十六进制",
      " */",
      "function randomColor() {",
      "  return '#' + ('00000' + (Math.random() * 0x1000000 << 0).toString(16)).slice(-6);",
      "}"
    ],
    "description": "随机生成颜色"
  },

  "jsdatatype": {
    "prefix": ["jsdatatype", "datatype"],
    "body": [
      "/**",
      " * @description 数据类型判断",
      " * @param { Object } obj 要判断的数据对象",
      " * @param { String } type 数据类型",
      " * @return { Boolean } 是否为传入的数据类型",
      " */",
      "function dataType(obj, type) {",
      "  var _type = '';",
      "  if (type) {",
      "    _type = type.toLowerCase();",
      "  }",
      "  switch (_type) {",
      "    case 'string':",
      "      return Object.prototype.toString.call(obj) === '[object String]';",
      "    case 'number':",
      "      return Object.prototype.toString.call(obj) === '[object Number]';",
      "    case 'boolean':",
      "      return Object.prototype.toString.call(obj) === '[object Boolean]';",
      "    case 'undefined':",
      "      return Object.prototype.toString.call(obj) === '[object Undefined]';",
      "    case 'null':",
      "      return Object.prototype.toString.call(obj) === '[object Null]';",
      "    case 'function':",
      "      return Object.prototype.toString.call(obj) === '[object Function]';",
      "    case 'array':",
      "      return Object.prototype.toString.call(obj) === '[object Array]';",
      "    case 'object':",
      "      return Object.prototype.toString.call(obj) === '[object Object]';",
      "    case 'nan':",
      "      return isNaN(obj);",
      "    case 'elements':",
      "      return Object.prototype.toString.call(obj).indexOf('HTML') !== -1;",
      "    default:",
      "      return Object.prototype.toString.call(obj);",
      "  }",
      "}"
    ],
    "description": "数据类型判断"
  },
  
  "jsremoverepeatarray": {
    "prefix": ["jsremoverepeatarray", "removerepeatarray","数组去重","去重"],
    "body": [
      "/**",
      " * @description 数组去重",
      " * @param { Array } arr 要去重的数组",
      " * @return { Array } 去重后的数组",
      " */",
      "function removeRepeatArr(arr) {",
      "  return arr.filter(function (item, index, self) {",
      "    return self.indexOf(item) === index;",
      "  });",
      "}"
    ],
    "description": "数组去重"
  },

  "jsrandomsortarray": {
    "prefix": ["jsrandomsortarray", "randomsortarray","数组随机打乱"],
    "body": [
      "/**",
      " * @description 数组顺序随机打乱",
      " * @param { Array } arr 要打乱的数组",
      " * @return { Array } 打乱后的数组",
      " */",
      "function upsetArr(arr) {",
      "  return arr.sort(function () {",
      "    return Math.random() - 0.5;",
      "  });",
      "}"
    ],
    "description": "数组顺序随机打乱"
  },

  "jsweixin": {
    "prefix": ["jsweixin", "weixin", "jswx", "wx"],
    "body": [
      "/**",
      " * @description 是否微信内置浏览器",
      " * @return { Boolean } 是否微信内置浏览器",
      " */",
      "function isWeixin() {",
      "  if (window.navigator.userAgent.toLowerCase().match(/MicroMessenger/i) == 'micromessenger') {",
      "    return true;",
      "  }",
      "  return false;",
      "}"
    ],
    "description": "是否微信内置浏览器，关键字：jsweixin, weixin, jswx, wx"
  },

  "jsdaysinmonth": {
    "prefix": ["jsdaysinmonth", "daysinmonth","获取月天数","月天数"],
    "body": [
      "/**",
      " * @description 获取某个月的天数",
      " * @param { Number } year 年",
      " * @param { Number } month 月",
      " * @return { Number } 某个月的天数",
      " */",
      " function dayOfMonth(year, month) {",
      "  var date = new Date(year, parseInt(month), 0);",
      "  return date.getDate();",
      "}"
    ],
    "description": "获取某个月的天数"
  },

  "jssystemType": {
    "prefix": ["jssystemType", "systemType","获取系统类型","系统类型"],
    "body": [
      "/**",
      " * @description 获取操作系统类型",
      " * @return { String } 系统类型",
      " */",
      "function getSystemType() {",
      "  var userAgent = 'navigator' in window && 'userAgent' in navigator && navigator.userAgent.toLowerCase() || '';",
      "  var appVersion = 'navigator' in window && 'appVersion' in navigator && navigator.appVersion.toLowerCase() || '';",
      "",
      "  if (/mac/i.test(appVersion)) return 'MacOSX';",
      "  if (/win/i.test(appVersion)) return 'windows';",
      "  if (/linux/i.test(appVersion)) return 'linux';",
      "  if (/iphone/i.test(userAgent) || /ipad/i.test(userAgent) || /ipod/i.test(userAgent)) 'ios';",
      "  if (/android/i.test(userAgent)) return 'android';",
      "  if (/win/i.test(appVersion) && /phone/i.test(userAgent)) return 'windowsPhone';",
      "}"
    ],
    "description": "获取操作系统类型"
  },

  "jswxApiauthorization": {
    "prefix": ["jswxApiauthorization", "jswx", "wx"],
    "body": [
      "const WX_SDK = '//res2.wx.qq.com/open/js/jweixin-1.6.0.js';",
      "// import { parseQueryToObj, getQueryStringFromObj } from '@/utils/common.js'",
      "import shareImg from '../assets/images/share_img.png';",
      "let shareConfig = {",
      "  title: '分享标题', // 分享标题",
      "  imgUrl: shareImg, // 分享图标",
      "  desc: '描述'",
      "}",
      "",
      "export const wxApiauthorizationConfig = {",
      "  appid: '',",
      "  isSuccess: false",
      "};",
      "",
      "/**",
      " * 判断当前是否是在微信环境下",
      " */",
      "export const isWxEnv = function() {",
      "  let ua = navigator.userAgent.toLowerCase();",
      "  if (ua.match(/MicroMessenger/i) == \"micromessenger\") {",
      "    return true;",
      "  } else {",
      "    return false;",
      "  }",
      "}",
      "",
      "/** ",
      " * @returns 手动加载微信sdk",
      " */",
      "const loadWxSdk = function() {",
      "  return new Promise((resolve, reject) => {",
      "    const isWx = isWxEnv();",
      "    if (!isWx) {",
      "      resolve(false)",
      "      return;",
      "    }",
      "    if (wx) {",
      "      resolve(true)",
      "      return;",
      "    }",
      "    const script = document.createElement(\"script\");",
      "    script.setAttribute(\"src\", WX_SDK);",
      "    document.getElementsByTagName(\"head\")[0].appendChild(script);",
      "    script.onerror = function (err) {",
      "      reject(err)",
      "    }",
      "    script.onload = function() {",
      "      resolve(true)",
      "    }",
      "  })",
      "}",
      "",
      "/**",
      " * 微信分享配置",
      " * @param {Object} config ",
      " */",
      "const wxShareConfig = function() {",
      "  wx.ready(function() {",
      "    const {title, imgUrl, desc} = shareConfig;",
      "    const shareUrl = location.origin + location.pathname;",
      "    // 分享到朋友圈",
      "    wx.updateTimelineShareData({",
      "      title, // 分享标题",
      "      link: shareUrl, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致",
      "      imgUrl, // 分享图标",
      "      success: function () {",
      "        console.log('--wx share--:ok', '分享到朋友圈成功');",
      "      },",
      "      cancel: function () {",
      "        console.log('--wx share--:error', '分享到朋友圈失败');",
      "      }",
      "    });",
      "    // 分享到好友和群",
      "    wx.updateAppMessageShareData({",
      "      title, // 分享标题",
      "      desc, // 分享描述",
      "      link: shareUrl, // 分享链接，该链接域名或路径必须与当前页面对应的公众号JS安全域名一致",
      "      imgUrl, // 分享图标",
      "      type: 'link', // 分享类型,music、video或link，不填默认为link",
      "      dataUrl: '', // 如果type是music或video，则要提供数据链接，默认为空",
      "      success: function () {",
      "        console.log('--wx share--:ok', '分享到好友或群成功')",
      "      },",
      "      cancel: function () {",
      "        console.log('--wx share--:error', '分享到好友或群失败');",
      "      }",
      "    });",
      "  })",
      "}",
      "",
      "const wxConfigRequest = function() {",
      "  return new Promise((resolve, reject) => {",
      "    var script = document.createElement(\"script\");",
      "    script.setAttribute('type', 'text/javascript');",
      "    script.setAttribute(\"src\", \"https://act.meizu.cn/index.php?mod=oauth&action=get_wx_js_conf&callback=setConfigData&url=\" + encodeURIComponent(location.href.split(\"#\")[0]));",
      "    script.onerror = function (err) {",
      "      console.log(\"---- 加载微信配置失败 ----\", err);",
      "      resolve(false);",
      "    }",
      "    script.onload = function (res) {",
      "      console.log(\"---- 加载微信配置成功 ----\", res);",
      "      resolve(true);",
      "    }",
      "    document.getElementsByTagName(\"head\")[0].appendChild(script);",
      "  })",
      "}",
      "",
      "window.setConfigData = function(cfg) {",
      "  console.log('--setConfigData--:', cfg);",
      "  if (!cfg || !cfg.data) {",
      "    return;",
      "  }",
      "  let { noncestr, signature, timestamp, appid } = cfg.data;",
      "  wxApiauthorizationConfig.appid = appid;",
      "  // 分享配置",
      "  wxShareConfig();",
      "  // 信息验证成功",
      "  wx.ready(function() {",
      "    wxApiauthorizationConfig.success = true;",
      "  });",
      "  // 信息验证失败",
      "  wx.error(function() {",
      "    wxApiauthorizationConfig.success = false;",
      "  });",
      "  wx.config({",
      "    debug: false, // 开启调试模式,调用的所有 api 的返回值会在客户端 alert 出来，若要查看传入的参数，可以在 pc 端打开，参数信息会通过 log 打出，仅在 pc 端时才会打印。",
      "    appId: appid, // 必填，公众号的唯一标识",
      "    nonceStr: noncestr, // 必填，生成签名的时间戳",
      "    timestamp, // 必填，生成签名的随机串",
      "    signature, // 必填，签名",
      "    jsApiList: ['updateAppMessageShareData','updateTimelineShareData', 'getLocation']",
      "  });",
      "}",
      "",
      "/**",
      " * 微信分享初始化",
      " */",
      "export const wxApiAuthorization = function(config = {}) {",
      "  loadWxSdk.then((res) => {",
      "    if (res) {",
      "      Object.assign(shareConfig, config);",
      "      return wxConfigRequest();",
      "    } else {",
      "      console.log('---- wxApiauthorization  ----:', '微信sdk加载失败');",
      "    }",
      "  }).catch(() => {",
      "    console.log('---- wxApiauthorization  ----:', '微信sdk加载失败');",
      "  })",
      "}"
    ],
    "description": "微信api授权"
  },

  "jsaxios": {
    "prefix": ["jsaxios","axios"],
    "body": [
      "import axios from \"axios\";",
      "const CancelToken = axios.CancelToken;",
      "const cancelRequest = {};  // 用于存储需要取消的请求",
      "",
      "// axios实例化",
      "const instance = axios.create({",
      "  baseURL: import.meta.env.VITE_SERVER_BASE_URL, // vite独有根据不同环境切换不同的服务api地址",
      "  timeout: 5000,",
      "  withCredentials: true,",
      "  headers: {",
      "    'Content-Type': 'application/json;charset=utf-8'",
      "  }",
      "});",
      "",
      "// 添加请求拦截器",
      "instance.interceptors.request.use(function (config) {",
      "  // 解决get请求不会带content-type的问题",
      "  if (config.method === 'get') {",
      "    config.data = {unused: 0};",
      "  }",
      "  return config;",
      "}, function (error) {",
      "  // 对请求错误做些什么",
      "  return Promise.reject(error);",
      "});",
      "",
      "// 添加响应拦截器",
      "instance.interceptors.response.use(function (response) {",
      "  // 2xx 范围内的状态码都会触发该函数。",
      "  console.log('---- instance.interceptors.response ----', response);",
      "  // 精简返回结构",
      "  const { data, config } = response",
      "  // 例：如果检测到未登录，且这些接口是需要登录的",
      "  // if (data.code == UN_LOGIN && config.isLogin) {",
      "  //   未登录要做操作，一般是去登录",
      "  //   return data;",
      "  // }",
      "  if (cancelRequest[config.url]) {",
      "    cancelRequest[config.url] = null;",
      "  }",
      "  return data;",
      "}, function (error) {",
      "  if (cancelRequest[error.config.url]) {",
      "    cancelRequest[error.config.url] = null;",
      "  }",
      "  return Promise.reject(error);",
      "});",
      "",
      "/**",
      " * get请求",
      " * @param { String } url 请求地址",
      " * @param { Object } params 请求参数",
      " * @returns ",
      " */",
      "const get = (url, params, config) => {",
      "  if (cancelRequest[url]) {",
      "    cancelRequest[url]();",
      "    cancelRequest[url] = null;",
      "  }",
      "  return instance.get(url, {",
      "    params,",
      "    ...config,",
      "    cancelToken: new CancelToken(function executor(c) {",
      "      // executor 函数接收一个 cancel 函数作为参数",
      "      cancelRequest[url] = c;",
      "    })",
      "  })",
      "}",
      "",
      "/**",
      " * post请求",
      " * @param { String } url 请求地址",
      " * @param { Object } params 请求参数",
      " * @returns ",
      " */",
      " const post = (url, data, config) => {",
      "  if (cancelRequest[url]) {",
      "    cancelRequest[url]();",
      "    cancelRequest[url] = null;",
      "  }",
      "  return instance.post(url, data, {",
      "    ...config,",
      "    cancelToken: new CancelToken(function executor(c) {",
      "      // executor 函数接收一个 cancel 函数作为参数",
      "      cancelRequest[url] = c;",
      "    })",
      "  })",
      "}",
      "",
      "export default {",
      "  get,",
      "  post",
      "}"
    ],
    "description": "axios简易封装"
  },

  "fetch用法": {
    "prefix": ["jsfetch","fetch"],
    "body": [
      "const res = await fetch(url, {",
      "  method: '${1|POST,GET|}',",
      "  mode: 'cors',",
      "  // 跨域是否携带cookie",
      "  credentials: 'include',",
      "  headers: {",
      "    'Content-Type': '${2|application/x-www-form-urlencoded,text/plain,multipart/form-data|}'",
      "  },",
      "  body: ${3|qs.stringify,JSON.stringify|}({key: 'value'})",
      "}).then(res => res.json())"
    ],
    "description": "fetch用法"
  },

  "jsnumToMillennials": {
    "prefix": ["jsnumToMillennials", "numToMillennials", "jsnum", "数字转千分位", "千分位"],
    "body": [
      "/**",
      " * 数字转千分位",
      " * @param {number} num ",
      " * @returns ",
      " */",
      "const numToMillennials=(num)=>{",
      "  if(!num){",
      "      return '0.00';",
      "  };",
      "  let str = parseFloat(num).toFixed(2);",
      "  return str && str",
      "      .toString()",
      "      .replace(/(\\d)(?=(\\d{3})+\\.)/g, function($0, $1) {",
      "          return $1 + \",\";",
      "      });",
      "}"
    ],
    "description": "数字转千分位"
  },
  "jsgetDataType": {
    "prefix": ["jsgetDataType","getDataType","jsdataType","dataType","获取数据类型","数据类型"],
    "body": [
      "const getDateType = (value) => {",
      "  if (value === null) {",
      "    return value + \"\";",
      "  }",
      "  // 判断数据是引用类型的情况",
      "  if (typeof value === \"object\") {",
      "    let valueClass = Object.prototype.toString.call(value),",
      "    type = valueClass.split(\" \")[1].split(\"\");",
      "    type.pop();",
      "    return type.join(\"\").toLowerCase();",
      "  } else {",
      "    // 判断数据是基本数据类型的情况和函数的情况",
      "    return typeof value;",
      "  }",
      "}"
    ],
    "description": "获取数据类型"
  },
  "jsfullscreen": {
    "prefix": ["jsfullscreen","fullscreen","全屏"],
    "body": [
      "const FULL_SCREEN_STATUS = {",
      "  notSupported: 0, // 不支持",
      "  enter: 1, // 进入全屏",
      "  exit: 2, // 退出全屏",
      "  error: 3, // 进入全屏失败",
      "}",
      "",
      "class FullScreen {",
      "  /**",
      "   * @description: 全屏初始化",
      "   * @param {Function} fn 用户浏览器不支持全屏的回调",
      "   */",
      "  constructor(cb) {",
      "    this.prefixName = \"\"; // 浏览器前缀",
      "    this.isFullscreenData = true; // 浏览器是否支持全屏",
      "    this.cb = cb;",
      "    this.element = null;",
      "    this.isFullscreen();",
      "    this.screenChange();",
      "    this.screenError();",
      "  }",
      "  ",
      "  /**",
      "   * @description: 将传进来的元素全屏",
      "   * @param {String} domName 要全屏的dom名称",
      "   */",
      "  fullscreen(domName) {",
      "    const element = document.querySelector(domName);",
      "    this.element = element;",
      "    const methodName =",
      "      this.prefixName === \"\"",
      "        ? \"requestFullscreen\"",
      "        : `${this.prefixName}RequestFullScreen`;",
      "    element[methodName]();",
      "  }",
      "  ",
      "  // 退出全屏",
      "  exitFullscreen() {",
      "    const methodName =",
      "      this.prefixName === \"\"",
      "        ? \"exitFullscreen\"",
      "        : `${this.prefixName}ExitFullscreen`;",
      "    document[methodName]();",
      "  }",
      "  ",
      "  /**",
      "   * @description: 监听进入/离开全屏",
      "   */",
      "  screenChange() {",
      "    if (!this.isFullscreenData) return;",
      "    const methodName = `on${this.prefixName}fullscreenchange`;",
      "    document[methodName] = e => {",
      "      if (this.isElementFullScreen()) {",
      "         // 进入全屏回调",
      "        this.cb && this.cb(this.element, FULL_SCREEN_STATUS.enter);",
      "      } else {",
      "        // 退出全屏的回调",
      "        this.cb && this.cb(this.element, FULL_SCREEN_STATUS.exit);",
      "      }",
      "    };",
      "  }",
      "  /**",
      "   * @description: 浏览器无法进入全屏时触发,可能是技术原因，也可能是用户拒绝：比如全屏请求不是在事件处理函数中调用,会在这里拦截到错误",
      "   * 全屏请求必须在事件处理函数中调用，否则将会被拒绝",
      "   * @param {Function} enterErrorFn 回调",
      "   */",
      "  screenError() {",
      "    const methodName = `on${this.prefixName}fullscreenerror`;",
      "    document[methodName] = e => {",
      "      // 进入全屏失败回调",
      "      this.cb && this.cb(this.element, FULL_SCREEN_STATUS.error);",
      "    };",
      "  }",
      "  /**",
      "   * @description: 是否支持全屏+判断浏览器前缀",
      "   * @param {Function} fn 不支持全屏的回调函数 这里设了一个默认值",
      "   */",
      "  isFullscreen(fn) {",
      "    let fullscreenEnabled;",
      "    // 判断浏览器前缀",
      "    if (document.fullscreenEnabled) {",
      "      fullscreenEnabled = document.fullscreenEnabled;",
      "    } else if (document.webkitFullscreenEnabled) {",
      "      fullscreenEnabled = document.webkitFullscreenEnabled;",
      "      this.prefixName = \"webkit\";",
      "    } else if (document.mozFullScreenEnabled) {",
      "      fullscreenEnabled = document.mozFullScreenEnabled;",
      "      this.prefixName = \"moz\";",
      "    } else if (document.msFullscreenEnabled) {",
      "      fullscreenEnabled = document.msFullscreenEnabled;",
      "      this.prefixName = \"ms\";",
      "    }",
      "    if (!fullscreenEnabled) {",
      "      this.isFullscreenData = false;",
      "      this.cb && this.cb(this.element, FULL_SCREEN_STATUS.notSupported); // 执行不支持全屏的回调",
      "    }",
      "  }",
      "  /**",
      "   * @description: 检测有没有元素处于全屏状态",
      "   * @return 布尔值",
      "   */",
      "  isElementFullScreen() {",
      "    const attrName =",
      "      this.prefixName === \"\"",
      "        ? \"fullscreenElement\"",
      "        : `${this.prefixName}FullscreenElement`;",
      "    if (document[attrName] === null) {",
      "      return false; // 当前没有元素在全屏状态",
      "    } else {",
      "      return true; // 有元素在全屏状态",
      "    }",
      "  }",
      "}",
      "",
      "// 使用示例",
      "let full = new FullScreen((element, status) => {",
      "  if (status === FULL_SCREEN_STATUS.notSupported) {",
      "    console.log('当前浏览器不支持全屏', element.nodeName);",
      "  } else if (status === FULL_SCREEN_STATUS.enter) {",
      "    console.log('进入全屏', element.nodeName);",
      "  } else if (status === FULL_SCREEN_STATUS.exit) {",
      "    console.log('退出全屏', element.nodeName);",
      "  } else {",
      "    console.log('进入全屏失败', element.nodeName);",
      "  }",
      "});",
      "",
      "// 全屏请求必须在事件处理函数中调用，否则将会被拒绝。",
      "full.fullscreen(\".left\"); // 触发进去全屏失败回调",
      "function leftScreen() {",
      "  full.fullscreen(\".left\");",
      "}",
      "// 退出全屏 退出到上次的状态",
      "function exitScreen() {",
      "  full.exitFullscreen();",
      "}",
      ""
    ],
    "description": "指定元素全屏实现代码"
  },
  "jscookie": {
    "prefix": ["jscookie","cookie"],
    "body": [
      "var docCookies = {",
      "  getItem: function (sKey) {",
      "    return (",
      "      decodeURIComponent(",
      "        document.cookie.replace(",
      "          new RegExp(",
      "            \"(?:(?:^|.*;)\\\\s*\" +",
      "              encodeURIComponent(sKey).replace(/[-.+*]/g, \"\\\\$&\") +",
      "              \"\\\\s*\\\\=\\\\s*([^;]*).*$)|^.*$\",",
      "          ),",
      "          \"\\$1\",",
      "        ),",
      "      ) || null",
      "    );",
      "  },",
      "  /**",
      "   * 设置cookie",
      "   * @param sKey cookie的key",
      "   * @param sValue cookie值",
      "   * @param vEnd 过期时间设置 数字就是s",
      "   * @param sPath 路径",
      "   * @param sDomain 域名",
      "   * @param bSecure 是否要求https",
      "   * @returns ",
      "   */",
      "  setItem: function (sKey, sValue, vEnd, sPath, sDomain, bSecure) {",
      "    if (!sKey || /^(?:expires|max\\-age|path|domain|secure)$/i.test(sKey)) {",
      "      return false;",
      "    }",
      "    var sExpires = \"\";",
      "    if (vEnd) {",
      "      switch (vEnd.constructor) {",
      "        case Number:",
      "          sExpires =",
      "            vEnd === Infinity",
      "              ? \"; expires=Fri, 31 Dec 9999 23:59:59 GMT\"",
      "              : \"; max-age=\" + vEnd;",
      "          break;",
      "        case String:",
      "          sExpires = \"; expires=\" + vEnd;",
      "          break;",
      "        case Date:",
      "          sExpires = \"; expires=\" + vEnd.toUTCString();",
      "          break;",
      "      }",
      "    }",
      "    document.cookie =",
      "      encodeURIComponent(sKey) +",
      "      \"=\" +",
      "      encodeURIComponent(sValue) +",
      "      sExpires +",
      "      (sDomain ? \"; domain=\" + sDomain : \"\") +",
      "      (sPath ? \"; path=\" + sPath : \"\") +",
      "      (bSecure ? \"; secure\" : \"\");",
      "    return true;",
      "  },",
      "  removeItem: function (sKey, sPath, sDomain) {",
      "    if (!sKey || !this.hasItem(sKey)) {",
      "      return false;",
      "    }",
      "    document.cookie =",
      "      encodeURIComponent(sKey) +",
      "      \"=; expires=Thu, 01 Jan 1970 00:00:00 GMT\" +",
      "      (sDomain ? \"; domain=\" + sDomain : \"\") +",
      "      (sPath ? \"; path=\" + sPath : \"\");",
      "    return true;",
      "  },",
      "  hasItem: function (sKey) {",
      "    return new RegExp(",
      "      \"(?:^|;\\\\s*)\" +",
      "        encodeURIComponent(sKey).replace(/[-.+*]/g, \"\\\\$&\") +",
      "        \"\\\\s*\\\\=\",",
      "    ).test(document.cookie);",
      "  },",
      "  keys: /* optional method: you can safely remove it! */ function () {",
      "    var aKeys = document.cookie",
      "      .replace(/((?:^|\\s*;)[^\\=]+)(?=;|$)|^\\s*|\\s*(?:\\=[^;]*)?(?:\\1|$)/g, \"\")",
      "      .split(/\\s*(?:\\=[^;]*)?;\\s*/);",
      "    for (var nIdx = 0; nIdx < aKeys.length; nIdx++) {",
      "      aKeys[nIdx] = decodeURIComponent(aKeys[nIdx]);",
      "    }",
      "    return aKeys;",
      "  },",
      "};"
    ],
    "description": "cookie封装(mdn)"
  },
  "jslocalstorage": {
    "prefix": ["jslocalstorage","localstorage","jsstorage","storage"],
    "body": [
      "class LocalStorage {",
      "  defaultExpired = 0; // 默认过期天数",
      "  ",
      "  constructor(options) {",
      "    if (options) {",
      "      if (options.defaultExpired) {",
      "        this.defaultExpired = options.defaultExpired",
      "      }",
      "    }",
      "  }",
      "",
      "  /**",
      "   * 设置本地存储",
      "   * @param key 本地存储key",
      "   * @param value 本地存储值",
      "   * @param expiredSeconds 过期秒数",
      "   */",
      "  setItem(key, value, expiredSeconds) {",
      "    const now = Date.now();",
      "    let expired = 0;",
      "    // 有设置默认过期时间才处理过期时间",
      "    if (this.defaultExpired) {",
      "      expired = now + 1000 * 60 * 60 * 24 * this.defaultExpired; // 默认过期时间",
      "    }",
      "",
      "    // 这里我们限定了 expired 和 maxAge 都是 number 类型，",
      "    if (expiredSeconds) {",
      "      expired = now + expiredSeconds * 1000;",
      "    }",
      "",
      "    localStorage.setItem(",
      "      key,",
      "      expired ? JSON.stringify({",
      "        value,",
      "        expired: expired // 存储的过期时间",
      "      }) : value",
      "    );",
      "  }",
      "",
      "  getItem(key) {",
      "    let result = null;",
      "    // 防错",
      "    try {",
      "      result = localStorage.getItem(key);",
      "    }",
      "    catch(err){}",
      "    if (!result) {",
      "      // 若key本就不存在，直接返回null",
      "      return null;",
      "    }",
      "    let value, expired;",
      "    // 支持获取未设置过期时间的本地存储",
      "    try {",
      "      let resultObj = JSON.parse(result);",
      "      if (resultObj && resultObj.value && resultObj.expired) {",
      "        value = resultObj.value;",
      "        expired = resultObj.expired;",
      "      }",
      "    }",
      "    catch(err){}",
      "    if (expired) {",
      "      if (Date.now() <= expired) {",
      "        // 还没过期，返回存储的值",
      "        return value;",
      "      } else {",
      "        // 已过期，删除该key，然后返回null",
      "        this.removeItem(key);",
      "        return null;",
      "      }",
      "    }",
      "    return result;",
      "  }",
      "",
      "  // 删除key",
      "  removeItem(key) {",
      "    localStorage.removeItem(key);",
      "  }",
      "",
      "  // 清除所有过期的key",
      "  clearAllExpired() {",
      "    let num = 0;",
      "",
      "    // 判断 key 是否过期，然后删除",
      "    const delExpiredKey = (key, value) => {",
      "      if (value) {",
      "        let expired = -1;",
      "        try {",
      "          const valueObj = JSON.parse(value);",
      "          if (valueObj && valueObj.expired) {",
      "            expired = valueObj.expired;",
      "          }",
      "        }",
      "        catch(err){",
      "          ",
      "        }",
      "        // expired为-1要么是没有设置过期的，要么是parse出错的",
      "        if (expired === -1) {",
      "          return 0;",
      "        }",
      "        if (Date.now() > expired) {",
      "          // 已过期",
      "          localStorage.removeItem(key);",
      "          return 1;",
      "        }",
      "      } else {",
      "        // 若 value 无值，则直接删除",
      "        localStorage.removeItem(key);",
      "        return 1;",
      "      }",
      "      return 0;",
      "    };",
      "",
      "    const { length } = window.localStorage;",
      "",
      "    for (let i = 0; i < length; i++) {",
      "      const key = window.localStorage.key(i);",
      "",
      "      if (key) {",
      "        const value = window.localStorage.getItem(key);",
      "        num += delExpiredKey(key, value);",
      "      }",
      "    }",
      "    return num;",
      "  }",
      "}"
    ],
    "description": "localstorage封装,支持设置过期时间"
  },

  "深拷贝": {
    "prefix": ["jscloneDeep", "cloneDeep", "jsskb", "skb", "深拷贝"],
    "body": [
      "/**",
      " * 深拷贝",
      " * @param obj ",
      " * @returns 新拷贝的对象",
      " */",
      "function cloneDeep(obj) {",
      "  // Hash表 记录所有的对象引用关系",
      "  let map = new WeakMap();",
      "  function dp(obj) {",
      "    let result = null;",
      "    let keys = null,",
      "      key = null,",
      "      temp = null,",
      "      existObj = null;",
      "",
      "    existObj = map.get(obj);",
      "    // 如果这个对象已被记录则直接返回",
      "    if (existObj) {",
      "      return existObj;",
      "    }",
      "    keys = Object.keys(obj);",
      "    result = {};",
      "    // 记录当前对象",
      "    map.set(obj, result);",
      "    for (let i = 0; i < keys.length; i++) {",
      "      key = keys[i];",
      "      temp = obj[key];",
      "      // 如果字段的值也是一个对象则递归复制",
      "      if (temp && typeof temp === 'object') {",
      "        result[key] = dp(temp);",
      "      } else {",
      "        // 否则直接赋值给新对象",
      "        result[key] = temp;",
      "      }",
      "    }",
      "    return result;",
      "  }",
      "  return dp(obj);",
      "}"
    ],
    "description": "对象深拷贝"
  },

  "深拷贝stringify+parse": {
    "prefix": ["jscloneDeep", "cloneDeep", "jsskb", "skb", "深拷贝"],
    "body": [
      "JSON.parse(JSON.stringify(${1:obj}))"
    ],
    "description": "深拷贝stringify+parse"
  },

  "jsstoppropagation": {
    "prefix": ["jsstoppropagation", "stoppropagation", "jsstop", "stop", "阻止冒泡"],
    "body": [
      "e = e || window.event;",
      "if (e.stopPropagation) {// W3C阻止冒泡方法 ",
      "  e.stopPropagation();",
      "} else {",
      "  e.cancelBubble = true; // IE阻止冒泡方法 ",
      "}"
    ],
    "description": "阻止事件冒泡，兼容ie"
  },

  "jspreventdefault": {
    "prefix": ["jspreventdefault", "preventdefault", "jsstop", "stop", "阻止事件默认行为"],
    "body": [
      "if(e.preventDefault){",
      "  e.preventDefault()",
      "}else{",
      "  e.returnValue = false;",
      "}"
    ],
    "description": "阻止事件默认行为，兼容ie"
  },

  "jsgetboundingclientrect": {
    "prefix": ["jsgetboundingclientrect", "getboundingclientrect", "jsgetdomrect", "getdomrect", "元素位置大小"],
    "body": [
      "/**",
      " *  返回一个DOMRect对象，包含top,left,right,bottom,width,height",
      " *  top 元素上外边界距窗口最上面的距离",
      " *  right 元素右外边界距窗口最上面的距离",
      " *  bottom 元素下外边界距窗口最上面的距离",
      " *  left 元素左外边界距窗口最上面的距离",
      " *  width 元素自身宽(包含border,padding) ",
      " *  height 元素自身高(包含border,padding) ",
      " * @param select 元素选择器",
      " * @returns ",
      " */",
      "const getDomRect = (select) => {",
      "  if (!select) {",
      "    return null;",
      "  }",
      "  const element = document.querySelector(select);",
      "  if (!element) {",
      "    return null;",
      "  }",
      "  return element.getBoundingClientRect();  ",
      "}"
    ],
    "description": "获取元素位置大小"
  },

  "jseventdelegation": {
    "prefix": ["jseventdelegation","eventdelegation", "事件委托"],
    "body": [
      "// 事件委托  ",
      "${1:element}.addEventListener('click', function(event) {",
      "  // event对象  ",
      "  const event = window.event||event;    ",
      "  // 事件的目标节点  ",
      "  const target = event.target || event.srcElement;   ",
      "  if (target.tagName.toLowerCase() === '${2:tagname}') {   ",
      "    console.log(target.innerHTML)   ",
      "  } ",
      "}); "
    ],
    "description": "事件委托"
  },

  "jsonp请求": {
    "prefix": ["jsjsonp","jsonp"],
    "body": [
      "/**",
      " * jsonp的原理就是生成一个script,赋值请求url，再带上回调，服务端会返：回调（数据）",
      " * @param url ",
      " * @param callbackName ",
      " * @returns ",
      " */",
      "function jsonp(url, callbackName='callback') {",
      "  return new Promise((resolve, reject) => {",
      "    let _url = url+ (url.indexOf('?') === -1 ? '?' : '&') + callbackName + '=jsonpCallback'; ",
      "    let head = document.getElementsByTagName('head')[0];",
      "    let script = document.createElement('script');",
      "    head.appendChild(script);",
      "    //创建jsonp回调函数",
      "    window.jsonpCallback = res => {",
      "      resolve(res);",
      "      head.removeChild(script);",
      "      window.jsonpCallback = null;",
      "    }",
      "    script.onerror = function(err) {",
      "      reject(err);",
      "    }",
      "    //发送请求",
      "    script.src = _url;",
      "  })",
      "}"
    ],
    "description": "jsonp请求"
  },

  "jsajax": {
    "prefix": ["jsajax","ajax"],
    "body": [
      "function transdata(data) {",
      "  //在转换之前先给data添加属性t 值为时间戳",
      "  data.t = new Date().getTime();",
      "  //把{'userName': 'ylf','userPwd': '123456'} 形式转换成 userName=ylf&userPwd=123456形式",
      "  var arr = [];",
      "  for (var key in data) {",
      "    //使用for in遍历数组",
      "    //将属性值：属性名形式转换为属性值=属性名形式  拼接到数组后面",
      "    arr.push(encodeURIComponent(key) + '=' + encodeURIComponent(data[key]));",
      "  }",
      "  //使用join方法将数组转换为字符串形式 使用&作为分隔符",
      "  return arr.join('&');",
      "}",
      "",
      "function ajax(option) {",
      "  //定义异步对象和计时器",
      "  var xhr, timer;",
      "  //0 .使用自定义的transdata函数将传递过来的参数由{'userName': 'ylf','userPwd': '123456'} 形式转换成 userName=ylf&userPwd=123456形式",
      "  var data = transdata(option.data);",
      "  //1. 创建一个异步对象 兼容低版本ie浏览器",
      "  if (window.XMLHttpRequest) {",
      "    xhr = new XMLHttpRequest();",
      "  } else {",
      "    xhr = new ActiveXObject(\"Microsoft.XMLHTTP\");",
      "  }",
      "  //2. 设置请求方式和请求地址 ",
      "  if (option.type.toLowerCase() === \"get\") {",
      "    //3. get设置请求方式 将需要传递的参数拼接到url后面 方便php读取",
      "    xhr.open(option.type, option.url + \"?\" + data, true);",
      "    //3. get发送请求",
      "    xhr.send();",
      "  } else {",
      "    //3. 给post请求传参时open内容正常写 使用send方法传递参数",
      "    xhr.open(option.type, option.url, true);",
      "    xhr.setRequestHeader(\"Content-type\", \"application/x-www-form-urlencoded\");",
      "    //3. post发送请求",
      "    xhr.send(data);",
      "  }",
      "  //4. 监听异步对象状态变化",
      "  xhr.onreadystatechange = function () {",
      "    if (xhr.readyState === 4) {",
      "      //请求完成之后停止计时器",
      "      clearInterval(timer);",
      "      //http状态码在200到300之间或者304时 说明网页正常响应",
      "      if (xhr.status >= 200 && xhr.status <= 300 || xhr.status === 304) {",
      "        //处理返回结果",
      "        option.success(xhr);",
      "      } else {",
      "        //处理返回结果",
      "        option.error(xhr);",
      "      }",
      "    }",
      "  };",
      "  //为了防止请求时间过长 我们创建一个计时器",
      "  //判断是否传递了timeout参数",
      "  if (option.timout) {",
      "    timer = setInterval(function () {",
      "      console.log(\"请求超时\");",
      "      //计时器到达时间之后我们停止请求 并打印请求超时",
      "      xhr.abort();",
      "      clearInterval(timer);",
      "    }, option.timeout);",
      "  };",
      "}",
      "",
      "// 使用示例",
      "ajax({",
      "  type: \"post\",",
      "  url: \"04-ajax.php\",",
      "  data: {",
      "    \"userName\": \"ylf\",",
      "    \"userPwd\": \"123123\"",
      "  },",
      "  timeout: 3000,",
      "  success: function (xhr) {",
      "    alert(xhr.responseText);",
      "  },",
      "  error: function (xhr) {",
      "    alert(\"请求失败\");",
      "  }",
      "})"
    ],
    "description": "简易ajax封装"
  },

  "jscopy": {
    "prefix": ["jscopy","copy","复制"],
    "body": [
      "/**",
      " * 复制文本",
      " * @param text ",
      " */",
      "function copyText(text) {",
      "  return new Promise((resolve) => {",
      "    console.log('copy', navigator.clipboard)",
      "    if (!navigator.clipboard) {",
      "      navigator.clipboard.writeText(text).then(() => {",
      "        resolve(true);",
      "      }).catch(() => {",
      "        resolve(false);",
      "      });",
      "    } else {",
      "      try {",
      "        var textarea = document.createElement('textarea');",
      "        document.body.appendChild(textarea);",
      "        // 隐藏此输入框",
      "        textarea.style.position = 'fixed';",
      "        textarea.style.clip = 'rect(0 0 0 0)';",
      "        textarea.style.top = '10px';",
      "        // 赋值",
      "        textarea.value = text;",
      "        // 选中",
      "        textarea.select();",
      "        // 复制",
      "        document.execCommand('copy', true);",
      "        // 移除输入框",
      "        document.body.removeChild(textarea);",
      "        resolve(true);",
      "      }",
      "      catch(err){",
      "        resolve(false);",
      "      }",
      "    }",
      "  })",
      "}"
    ],
    "description": "复制文本"
  },

  "jsgetscrolldistance": {
    "prefix": ["jsgetscrolldistance","getscrolldistance","获取滚动像素","滚动像素"],
    "body": [
      "/**",
      " * 获取滚动的像素值x:水平 y:垂直",
      " * @param el ",
      " * @returns ",
      " */",
      "const getScrollDistance = (el = window) => ({",
      "  x: el.pageXOffset !== undefined ? el.pageXOffset : el.scrollLeft,",
      "  y: el.pageYOffset !== undefined ? el.pageYOffset : el.scrollTop",
      "});"
    ],
    "description": "获取滚动像素"
  },

  "jsscrolltotop": {
    "prefix": ["jsscrolltotop","scrolltotop","滚动到顶部"],
    "body": [
      "/**",
      " * 滚动到顶部",
      " * @param el ",
      " */",
      "const scrollToTop = (el) => {",
      "  const c = el ? el.scrollTop : document.documentElement.scrollTop || document.body.scrollTop;",
      "  if (c > 0) {",
      "    window.requestAnimationFrame(() => scrollToTop(el));",
      "    (el || window).scrollTo(0, Math.floor(c - c / 8));",
      "  }",
      "}"
    ],
    "description": "滚动到顶部"
  },

  "jsconvertchineseamount": {
    "prefix": ["jsconvertchineseamount","convertchineseamount","数字转中文大写金额","中文大写金额"],
    "body": [
      "/**",
      " * 数字转中文大写金额",
      " * @param money 长度不能大于17位 大小小于Number.MAX_SAFE_INTEGER",
      " * @returns ",
      " */",
      "function convertChineseAmount(money) {",
      "  //汉字的数字",
      "  let cnNums = [\"零\",\"壹\",\"贰\",\"叁\",\"肆\",\"伍\",\"陆\",\"柒\",\"捌\",\"玖\"];",
      "  //基本单位",
      "  let cnIntRadice = new Array(\"\", \"拾\", \"佰\", \"仟\");",
      "  //对应整数部分扩展单位",
      "  let cnIntUnits = new Array(\"\", \"万\", \"亿\", \"兆\");",
      "  //对应小数部分单位",
      "  let cnDecUnits = new Array(\"角\", \"分\", \"毫\", \"厘\");",
      "  //整数金额时后面跟的字符",
      "  let cnInteger = \"整\";",
      "  //整型完以后的单位",
      "  let cnIntLast = \"元\";",
      "  //最大处理的数字",
      "  let maxNum = Number.MAX_SAFE_INTEGER;",
      "  //金额整数部分",
      "  let integerNum;",
      "  //金额小数部分",
      "  let decimalNum;",
      "  //输出的中文金额字符串",
      "  let chineseStr = \"\";",
      "  //分离金额后用的数组，预定义",
      "  let parts;",
      "  if (String(money).length > 17) {",
      "    console.log('---- error ----:', '大于js可以处理的数字长度');",
      "    return \"\";",
      "  }",
      "  money = parseFloat(Number(money));",
      "  if (money > maxNum) {",
      "    console.log('---- error ----:', '大于js可以处理的数字大小');",
      "    //超出最大处理数字",
      "    return \"\";",
      "  }",
      "  if (money == 0) {",
      "    chineseStr = cnNums[0] + cnIntLast + cnInteger;",
      "    return chineseStr;",
      "  }",
      "  //转换为字符串",
      "  money = money.toString();",
      "  if (money.indexOf(\".\") == -1) {",
      "    integerNum = money;",
      "    decimalNum = \"\";",
      "  } else {",
      "    parts = money.split(\".\");",
      "    integerNum = parts[0];",
      "    decimalNum = parts[1].substr(0, 4);",
      "  }",
      "  //获取整型部分转换",
      "  if (parseInt(integerNum, 10) > 0) {",
      "    let zeroCount = 0;",
      "    let IntLen = integerNum.length;",
      "    for (let i = 0; i < IntLen; i++) {",
      "      let n = integerNum.substr(i, 1);",
      "      let p = IntLen - i - 1;",
      "      let q = p / 4;",
      "      let m = p % 4;",
      "      if (n == \"0\") {",
      "        zeroCount++;",
      "      } else {",
      "        if (zeroCount > 0) {",
      "          chineseStr += cnNums[0];",
      "        }",
      "        //归零",
      "        zeroCount = 0;",
      "        chineseStr += cnNums[parseInt(n)] + cnIntRadice[m];",
      "      }",
      "      if (m == 0 && zeroCount < 4) {",
      "        chineseStr += cnIntUnits[q];",
      "      }",
      "    }",
      "    chineseStr += cnIntLast;",
      "  }",
      "  //小数部分",
      "  if (decimalNum != \"\") {",
      "    let decLen = decimalNum.length;",
      "    for (let i = 0; i < decLen; i++) {",
      "      let n = decimalNum.substr(i, 1);",
      "      if (n != \"0\") {",
      "        chineseStr += cnNums[Number(n)] + cnDecUnits[i];",
      "      }",
      "    }",
      "  }",
      "  if (chineseStr == \"\") {",
      "    chineseStr += cnNums[0] + cnIntLast + cnInteger;",
      "  } else if (decimalNum == \"\") {",
      "    chineseStr += cnInteger;",
      "  }",
      "  return chineseStr;",
      "}"
    ],
    "description": "数字转中文大写金额"
  },

  "jsisinviewport": {
    "prefix": ["jsisinviewport","isinviewport","元素在可视区内","可视区内"],
    "body": [
      "/**",
      " * 判断元素是否完全在可视区内",
      " * @param element ",
      " * @returns ",
      " */",
      "function isInViewPort(element) {",
      "  const viewWidth = window.innerWidth || document.documentElement.clientWidth;",
      "  const viewHeight =",
      "    window.innerHeight || document.documentElement.clientHeight;",
      "  const { top, right, bottom, left } = element.getBoundingClientRect();",
      "",
      "  return top >= 0 && left >= 0 && right <= viewWidth && bottom <= viewHeight;",
      "}"
    ],
    "description": "判断元素是否完全在可视区内"
  },

  "jsisintoviewport": {
    "prefix": ["jsisintoviewport","isintoviewport",,"元素进入可视区内","可视区内"],
    "body": [
      "/**",
      " * 判断元素是否进入可视区内",
      " * @param element ",
      " * @returns ",
      " */",
      "function isInToViewPort(element) {",
      "  const viewWidth = window.innerWidth || document.documentElement.clientWidth;",
      "  const viewHeight =",
      "    window.innerHeight || document.documentElement.clientHeight;",
      "  const elW = element.offsetWidth;",
      "  const elh = element.offsetHeight;",
      "  const { top, right, bottom, left } = element.getBoundingClientRect();",
      "  return top > -elh && top < viewHeight && left > -elW && left < viewWidth;",
      "}"
    ],
    "description": "判断元素是否进入可视区内"
  },

  "jsintoviewportlistener": {
    "prefix": ["jsintoviewportlistener","intoviewportlistener","元素进入可视区监听"],
    "body": [
      "/**",
      " * 监听元素进入or离开可视区",
      " * @param element ",
      " * @param cb ",
      " */",
      "function inToViewPortListener(element, cb) {",
      "  const intersectionObserver = new IntersectionObserver((entries) => {",
      "    entries.forEach((item) => {",
      "      if (item.isIntersecting) {",
      "        cb(true);",
      "        console.log('进入可视区域');",
      "      } else {",
      "        cb(false);",
      "        console.log('退出可视区域');",
      "      }",
      "    })",
      "  });",
      "  intersectionObserver.observe(element);",
      "}"
    ],
    "description": "监听元素进入or离开可视区"
  },

  "jsquerySelector": {
    "prefix": ["jsqueryselect","queryselect","jsselect","select","元素选择"],
    "body": [
      "document.${1|querySelector,querySelectorAll|}(\"${2|.class,#id,inpput[attr='test']|}\");"
    ],
    "description": "querySelector选择元素"
  },

  "快速排序": {
    "prefix": ["jsquicksort","quicksort","jssort","sort","快速排序","排序"],
    "body": [
      "/**",
      " * 快速排序",
      " * @param arr ",
      " * @returns ",
      " */",
      "const quickSort = (arr) => {",
      "  const a = [...arr];",
      "  if (a.length < 2) return a;",
      "  const pivotIndex = Math.floor(arr.length / 2);",
      "  const pivot = a[pivotIndex];",
      "  const [lo, hi] = a.reduce(",
      "    (acc, val, i) => {",
      "      if (val < pivot || (val === pivot && i != pivotIndex)) {",
      "        acc[0].push(val);",
      "      } else if (val > pivot) {",
      "        acc[1].push(val);",
      "      }",
      "      return acc;",
      "    },",
      "    [[], []]",
      "  );",
      "  return [...quickSort(lo), pivot, ...quickSort(hi)];",
      "};"
    ],
    "description": "快速排序"
  },

  "选择排序": {
    "prefix": ["jsselectsort","selectsort","jssort","sort","选择排序","排序"],
    "body": [
      "/**",
      " * 选择排序",
      " * @param arr ",
      " * @returns ",
      " */",
      "const selectSort = (arr) => {",
      "  const a = [...arr];",
      "  for (let i = 0; i < a.length; i++) {",
      "    const min = a",
      "      .slice(i + 1)",
      "      .reduce((acc, val, j) => (val < a[acc] ? j + i + 1 : acc), i);",
      "    if (min !== i) [a[i], a[min]] = [a[min], a[i]];",
      "  }",
      "  return a;",
      "};"
    ],
    "description": "选择排序"
  },

  "插入排序": {
    "prefix": ["jsinsertSort","insertSort","jssort","sort","插入排序","排序"],
    "body": [
      "/**",
      " * 插入排序",
      " * @param arr ",
      " * @returns ",
      " */",
      "const insertSort = (arr) =>",
      "  arr.reduce((acc, x) => {",
      "    if (!acc.length) return [x];",
      "    acc.some((y, j) => {",
      "      if (x <= y) {",
      "        acc.splice(j, 0, x);",
      "        return true;",
      "      }",
      "      if (x > y && j === acc.length - 1) {",
      "        acc.splice(j + 1, 0, x);",
      "        return true;",
      "      }",
      "      return false;",
      "    });",
      "    return acc;",
      "  }, []);"
    ],
    "description": "插入排序"
  },

  "冒泡排序": {
    "prefix": ["jsbubblesort","bubblesort","jssort","sort","冒泡排序","排序"],
    "body": [
      "/**",
      " * 冒泡排序",
      " * @param arr ",
      " * @returns ",
      " */",
      "const bubbleSort = (arr) => {",
      "  let swapped = false;",
      "  const a = [...arr];",
      "  for (let i = 1; i < a.length; i++) {",
      "    swapped = false;",
      "    for (let j = 0; j < a.length - i; j++) {",
      "      if (a[j + 1] < a[j]) {",
      "        [a[j], a[j + 1]] = [a[j + 1], a[j]];",
      "        swapped = true;",
      "      }",
      "    }",
      "    if (!swapped) return a;",
      "  }",
      "  return a;",
      "};"
    ],
    "description": "冒泡排序"
  },

  "归并排序": {
    "prefix": ["jsmergesort","mergesort","jssort","sort","归并排序","排序"],
    "body": [
      "/**",
      " * 归并排序",
      " * @param arr ",
      " * @returns ",
      " */",
      "const mergeSort = (arr) => {",
      "  if (arr.length < 2) return arr;",
      "  const mid = Math.floor(arr.length / 2);",
      "  const l = mergeSort(arr.slice(0, mid));",
      "  const r = mergeSort(arr.slice(mid, arr.length));",
      "  return Array.from({ length: l.length + r.length }, () => {",
      "    if (!l.length) return r.shift();",
      "    else if (!r.length) return l.shift();",
      "    else return l[0] > r[0] ? r.shift() : l.shift();",
      "  });",
      "};"
    ],
    "description": "归并排序"
  },

  "桶排序": {
    "prefix": ["jsbucketsort","bucketsort","jssort","sort","桶排序","排序"],
    "body": [
      "/**",
      " * 桶排序",
      " * @param arr ",
      " * @returns ",
      " */",
      "const bucketSort = (arr, size = 5) => {",
      "  const min = Math.min(...arr);",
      "  const max = Math.max(...arr);",
      "  const buckets = Array.from(",
      "    { length: Math.floor((max - min) / size) + 1 },",
      "    () => []",
      "  );",
      "  arr.forEach((val) => {",
      "    buckets[Math.floor((val - min) / size)].push(val);",
      "  });",
      "  return buckets.reduce((acc, b) => [...acc, ...b.sort((a, b) => a - b)], []);",
      "};"
    ],
    "description": "桶排序"
  },

  "js实现暂停睡眼": {
    "prefix": ["jssleepsync","sleepsync","jssleep","sleep","暂停","睡眠"],
    "body": [
      "/**",
      " * js实现暂停睡眼",
      " * @param ms ",
      " */",
      "const sleepSync = (ms) => {",
      "  const end = new Date().getTime() + ms;",
      "  while (new Date().getTime() < end) {",
      "    /* do nothing */",
      "    console.log('---- sleeping ----');",
      "  }",
      "};"
    ],
    "description": "js实现暂停睡眼"
  },

  "获取地理位置": {
    "prefix": ["jsgetlocation","getlocation","地理位置"],
    "body": [
      "/**",
      " * 获取地理位置，经纬度",
      " * @param options",
      " * @returns ",
      " */",
      "function getLocation(options) {",
      "  const optionsTemp = Object.assign({},options, {",
      "    maximumAge: 0, // 位置缓存时间，0则是一直取最新的",
      "    timeout: Infinity, // 获取位置超时间，默认一直获取",
      "    enableHighAccuracy: false // 是否获取高精度位置，默认false",
      "  })",
      "  return new Promise((resolve, reject) => {",
      "    if (navigator.geolocation) {",
      "      navigator.geolocation.getCurrentPosition((position) => {",
      "        const {latitude, longitude, accuracy} = position.coords",
      "        resolve({",
      "          latitude,",
      "          longitude,",
      "          accuracy ",
      "        })",
      "      }, (error) => {",
      "        console.log(\"---- Error occurred. Error code: ----\" + error.code);",
      "        // code : 1 用户拒绝",
      "        // code : 2 无法获取",
      "        // code : 3 请求超时",
      "        reject(error);",
      "      }, optionsTemp);",
      "    } else {",
      "      resolve(null);",
      "    }",
      "  })",
      "}",
      "// 此免费接口可以经纬度转城市信息 :https://apia.yikeapi.com/geocode/?appid=43656176&appsecret=I42og6Lm&output=json&location=113.563482,22.375719"
    ],
    "description": "获取地理位置"
  },

  "H5摇一摇实现": {
    "prefix": ["jsdevicemotion","devicemotion","jsshake","shake","摇一摇"],
    "body": [
      "/**",
      " * 判断当前系统是否是安卓",
      " */",
      "function isAndroid() {",
      "  const u = window.navigator.userAgent;",
      "  return u.indexOf(\"Android\") > -1 || u.indexOf(\"Adr\") > -1;",
      "}",
      "",
      "/**",
      " * 节流函数",
      " * @param fn ",
      " * @param deley ",
      " * @param start ",
      " * @returns ",
      " */",
      "function throttle(fn, deley = 200, start = true) {",
      "  let timer = 0;",
      "  return function (...arg) { // 经过防抖处理的函数",
      "    const _this = this;",
      "    if (timer) {",
      "      return;",
      "    }",
      "    start && fn.apply(_this, arg);",
      "    timer = setTimeout(() => {",
      "      (!start) && fn.apply(_this, arg);",
      "      timer = 0;",
      "    }, deley);",
      "  }",
      "}",
      "",
      "// 手机摇一摇功能实现",
      "// 坑位：",
      "// 安卓下 和 IOS 下，加速度方向取值相反",
      "// 如果要使用加速度 API，当前应用则必须使用 https 协议",
      "// IOS 12.2 中，用户可以在手机设置中关闭掉，动作与方向的访问权限，需提示用户手动开启权限",
      "// IOS 13 及之后，当应用中想要使用动作与方向的访问权限时，需要请求用户授权",
      "// IOS 13.3 及之后，申请授权，必须用户手动触发",
      "class Shake {",
      "  constructor(errCb) {",
      "    this.errCb = errCb;",
      "    this.errCbNext = null;",
      "    this.init();",
      "  }",
      "",
      "  init() {",
      "    if (!window.DeviceMotionEvent) {",
      "      // alert(\"您的设备不支持速度检测\");",
      "      this.errCb(\"您的设备不支持加速度检测\");",
      "      this.errCbNext = () => {",
      "        this.errCb(\"您的设备不支持加速度检测\");",
      "      }",
      "      return;",
      "    }",
      "    // 在 IOS 12 中，判断用户是否关闭了动作与方向的访问权限",
      "    let timer = setTimeout(() => {",
      "      // alert(\"请开启动作与方向的访问权限，否则将无法使用本应用\");",
      "      this.errCb(\"请开启动作与方向的访问权限，否则将无法使用本应用\");",
      "      this.errCbNext = () => {",
      "        this.errCb(\"请开启动作与方向的访问权限，否则将无法使用本应用\");",
      "      }",
      "    }, 1000);",
      "    window.addEventListener(\"devicemotion\", () => {",
      "      clearTimeout(timer);",
      "      this.errCbNext = null;",
      "    }, { once: true });",
      "  }",
      "",
      "  /*",
      "  * addMotion 设置监听加速变化要处理的事情",
      "  * cb 加速度变化后要做的处理函数",
      "  * return 取消事件注册",
      "  */",
      "  addMotion(cb) {",
      "    let fn = (e) => {",
      "      let { x: accelerationX, y: accelerationY, z: accelerationZ } = e.acceleration;",
      "      let { x: accelerationIncludingGravityX, y: accelerationIncludingGravitY, z: accelerationIncludingGravitZ } = e.accelerationIncludingGravity;",
      "      if (isAndroid()) { // 处理安卓取反问题",
      "        accelerationX = -accelerationX;",
      "        accelerationY = -accelerationY;",
      "        accelerationZ = -accelerationZ;",
      "        accelerationIncludingGravityX = -accelerationIncludingGravityX;",
      "        accelerationIncludingGravitY = -accelerationIncludingGravitY;",
      "        accelerationIncludingGravitZ = -accelerationIncludingGravitZ;",
      "      }",
      "      let res = {",
      "        acceleration: {",
      "          x: accelerationX,",
      "          y: accelerationY,",
      "          z: accelerationZ",
      "        },",
      "        accelerationIncludingGravity: {",
      "          x: accelerationIncludingGravityX,",
      "          y: accelerationIncludingGravitY,",
      "          z: accelerationIncludingGravitZ",
      "        }",
      "      }",
      "      cb(res);",
      "    };",
      "    // 区分 IOS 13 及之前",
      "    if (typeof DeviceMotionEvent.requestPermission === \"function\") { // IOS 13 及之后",
      "      DeviceMotionEvent.requestPermission()",
      "        .then(permissionState => {",
      "          if (permissionState === 'granted') {",
      "            // 权限允许",
      "            window.addEventListener(\"devicemotion\", fn);",
      "            this.errCbNext = null;",
      "          }",
      "        }).catch(() => {",
      "          this.errCb(\"请开启授权否则无法使用本应用\");",
      "          this.errCbNext = () => {",
      "            this.errCb(\"请开启授权否则无法使用本应用\");",
      "          }",
      "        })",
      "    } else { //安卓及IOS 13之前",
      "      window.addEventListener(\"devicemotion\", fn);",
      "      this.errCbNext = null;",
      "    }",
      "    return () => {",
      "      window.removeEventListener(\"devicemotion\", fn);",
      "    }",
      "  }",
      "",
      "  /*",
      "  * startShake 摇一摇",
      "  * options : {",
      "  *   start:function // 开始摇一摇回调",
      "  *   shaking:function // 摇一摇中回调",
      "  *   end: function // 摇一摇结束回调",
      "  * }",
      "  */",
      "  startShake(options) {",
      "    if (this.errCbNext) {",
      "      this.errCbNext();",
      "      return;",
      "    }",
      "    const { start, shaking, end } = options;",
      "    let lastX = 0, lastY = 0, lastZ = 0;",
      "    const maxRange = 50;",
      "    const minRange = 5;",
      "    let isShake = false;",
      "    const unMotion = this.addMotion(throttle((e) => {",
      "      console.log('---- shaking ----:', e);",
      "      const { x, y, z } = e.acceleration;",
      "      const range = Math.abs(x - lastX) + Math.abs(y - lastY) + Math.abs(z - lastZ);",
      "      if (range > maxRange && (!isShake)) {",
      "        start && start(e);",
      "        isShake = true;",
      "      } else if (range > maxRange && isShake) {",
      "        shaking && shaking(e);",
      "      } else if (range < minRange && isShake) {",
      "        end && end(e);",
      "        isShake = false;",
      "      }",
      "      lastX = x;",
      "      lastY = y;",
      "      lastZ = z;",
      "    }));",
      "    return unMotion; //取消摇一摇监听",
      "  }",
      "",
      "}",
      "",
      "// **** 使用示例 ****",
      "// html 结构",
      "// <button id=\"btn\">开始摇一摇</button>",
      "// <button id=\"stopBtn\">停止</button>",
      "// <div id=\"info\"></div>",
      "let btn = document.querySelector(\"#btn\");",
      "let stopBtn = document.querySelector(\"#stopBtn\");",
      "let info = document.querySelector(\"#info\");",
      "let unShake;",
      "let shake = new Shake((message) => {",
      "  alert(message)",
      "})",
      "btn.addEventListener(\"click\", () => {",
      "  unShake = shake.startShake({",
      "    start: () => {",
      "      console.log(\"---- start ----:\", \"开始摇一摇\");",
      "      info.innerHTML = \"开始摇一摇\"",
      "    },",
      "    shake: () => {",
      "      console.log(\"---- start ----:\", \"摇一摇中\");",
      "      info.innerHTML = \"摇一摇中\"",
      "    },",
      "    end: () => {",
      "      console.log(\"---- start ----:\", \"摇一摇结束\");",
      "      info.innerHTML = \"摇一摇结束\"",
      "    }",
      "  })",
      "});",
      "stopBtn.addEventListener(\"click\", () => {",
      "  if (unShake) {",
      "    unShake();",
      "  }",
      "})"
    ],
    "description": "H5摇一摇实现"
  },

  "页面控制台vconsole": {
    "prefix": ["jsconsole","console","控制台"],
    "body": [
      "(function () {",
      "  var src = '//cdn.bootcdn.net/ajax/libs/vConsole/3.15.1/vconsole.min.js';",
      "  if (!/console=true/.test(window.location)) return;",
      "  document.write('<script src=\"' + src + '\"></script>');",
      "  document.write('<script>new VConsole();</script>');",
      "})();"
    ],
    "description": "页面控制台vconsole"
  },

  "页面控制台eruda": {
    "prefix": ["jsconsole","console","控制台"],
    "body": [
      "(function () {",
      "  var src = '//cdn.bootcdn.net/ajax/libs/eruda/3.0.1/eruda.min.js';",
      "  if (!/console=true/.test(window.location)) return;",
      "  document.write('<script src=\"' + src + '\"></script>');",
      "  document.write('<script>eruda.init();</script>');",
      "})();"
    ],
    "description": "页面控制台eruda"
  },

  "dom保存为图片": {
    "prefix": ["jsdomtoimage","domtoimage"],
    "body": [
      "import { domToPng } from 'modern-screenshot'",
      "domToPng(document.querySelector('#app')).then(dataUrl => {",
      "  const link = document.createElement('a')",
      "  link.download = 'screenshot.png'",
      "  link.href = dataUrl",
      "  link.click()",
      "});"
    ],
    "description": "dom保存为图片"
  },

  "链接生成二维码": {
    "prefix": ["jsurltoqrcode","urltoqrcode","js2wm","2wm","二维码"],
    "body": [
      "import QRCode from 'qrcode';",
      "QRCode.toDataURL(location.href.split('#')[0])",
      "  .then(dataUrl => {",
      "    const link = document.createElement('a')",
      "    link.download = 'screenshot.png'",
      "    link.href = dataUrl",
      "    link.click()",
      "  })",
      "  .catch(err => {",
      "    console.error('---- QRCode.toDataURL ----:', err);",
      "  });"
    ],
    "description": "链接生成二维码"
  },

  "元素滚动到可视范围之内": {
    "prefix": ["jsscrollintoview","scrollintoview"],
    "body": [
      "// 元素滚动到可视区内",
      "${1:dom}.scrollIntoView({",
      "  // smooth 平滑滚动",
      "  // instant 无动画，直接跳转 如果有css样式scroll-behavior: smooth;,以scroll-behavior为准",
      "  // auto 默认值，滚动行为由 scroll-behavior 的计算值决定",
      "  behavior: \"${2|smooth,instant,auto|}\",",
      "  // start 元素顶部和滚动容器顶部对齐 ",
      "  // center 元素和滚动容器居中对齐 ",
      "  // end 元素底部和滚动容器底部对齐 ",
      "  // nearest 如果已经在视野范围内，就不滚动，否则就滚动到顶部或者底部（哪个更靠近就滚到哪里）",
      "  block: '${3|start,center,end,nearest|}\"', ",
      "  // start 元素左侧和滚动容器左侧对齐 ",
      "  // center 元素和滚动容器居中对齐 ",
      "  // end 元素右侧和滚动容器右侧对齐 ",
      "  // nearest 如果已经在视野范围内，就不滚动，否则就滚动到左边或者右边（哪个更靠近就滚到哪里）",
      "  inline: '${4|start,center,end,nearest|}\"',",
      "})"
    ],
    "description": "元素滚动到可视范围之内"
  },

  "获取元素样式": {
    "prefix": ["jsgetstyle","getstyle"],
    "body": [
      "/**",
      " * 获取元素样式",
      " * @param {Element} obj ",
      " * @param {String} attr ",
      " * @returns ",
      " */",
      "function getStyle(obj, attr) {",
      "  if (obj.currentStyle) {",
      "    return obj.currentStyle[attr];",
      "  } else {",
      "    return obj.getComputedStyle(obj, null)[attr]",
      "  }",
      "}"
    ],
    "description": "获取元素样式"
  },

  "vite sever配置": {
    "prefix": ["jsviteserver","viteserver","jsserver","server"],
    "body": [
      "// vite server 配置",
      "server: {",
      "  port: 3000, // 端口",
      "  host: true, // 启动ip访问地址",
      "  // 代理",
      "  proxy: {",
      "    '/api': {",
      "      target: 'http://www.meizu.com',",
      "      changeOrigin: true,",
      "      rewrite: (path) => path.replace(/^\\/path/, '')",
      "    }",
      "  }",
      "}"
    ],
    "description": "vite sever配置"
  },

  "vueref": {
    "prefix": ["vref", "ref"],
    "body": [
      "const ${1:count} = ref(${2:0})"
    ],
    "description": "vueref"
  },
  "vuereactive": {
    "prefix": ["vreactive", "reactive"],
    "body": [
      "const ${1:state} = reactive({",
      "  msg: 'hello world!'",
      "});"
    ],
    "description": "vuereactive"
  },
  "vue3计算属性写法": {
    "prefix": ["vcomputed","computed"],
    "body": [
      "const countDouble = computed(() => {",
      "  return count.value * 2",
      "});"
    ],
    "description": "vue3计算属性写法"
  },
  "vue3计算属性get/set写法": {
    "prefix": ["vcomputed","computed"],
    "body": [
      "const firstName = ref('John')",
      "const lastName = ref('Doe')",
      "const fullName = computed({",
      "  // getter",
      "  get() {",
      "    return firstName.value + ' ' + lastName.value",
      "  },",
      "  // setter",
      "  set(newValue) {",
      "    [firstName.value, lastName.value] = newValue.split(' ')",
      "  }",
      "})"
    ],
    "description": "vue3计算属性get/set写法"
  },
  "vue3watch": {
    "prefix": ["vwatch3","watch3"],
    "body": [
      "watch(${1:count}, (newVal, oldVal) => {",
      "  console.log('---- watch ----:${1:count}', newVal, oldVal);",
      "},{immediate: true})"
    ],
    "description": "vue3watch"
  },
  "vue2watch": {
    "prefix": ["vwatch2","watch2"],
    "body": [
      "${1:count}(newVal, oldVal) {",
      "  console.log('---- watch ----:${1:count}', newVal, oldVal);",
      "}"
    ],
    "description": "vue2watch"
  },
  "vue2watch配置写法": {
    "prefix": ["vwatch2","watch2"],
    "body": [
      "${1:count}: {",
      "  hander(newVal, oldVal) {",
      "    console.log('---- watch ----:${1:count}', newVal, oldVal);",
      "  },",
      "  deep: true,",
      "  immediate: true",
      "}"
    ],
    "description": "vue2watch配置写法"
  },
  "vue2生命周期": {
    "prefix": ["vlife2","life2"],
    "body": [
      "${1|beforeCreate,created,beforeMount,mounted,beforeUpdate,updated,destroyed,activated,deactivated|}(() => {",
      "  console.log('---- ${1:example} ----:');",
      "})"
    ],
    "description": "vue2生命周期"
  },
  "vue3生命周期": {
    "prefix": ["vlife3","life3"],
    "body": [
      "${1|onBeforeMount,onMounted,onBeforeUpdate,onUpdated,onBeforeUnmount,onUnmounted,onActivated,onDeactivated|}(() => {",
      "  console.log('---- ${1:example} ----:');",
      "})"
    ],
    "description": "vue3生命周期"
  },
  "vue2emit": {
    "prefix": ["vemit2","emit2","emit"],
    "body": [
      "this.$emit('${1:myEvent}')"
    ],
    "description": "vue2emit"
  },
  "vue3emit": {
    "prefix": ["vemit3","emit3","emit"],
    "body": [
      "${1|const emit = defineEmits(['submit']);,emits: ['submit']\,|}"
    ],
    "description": "vue3emit"
  },
  "vue2全局组件": {
    "prefix": ["vueglobalcomponents2","globalcomponents2"],
    "body": [
      "// 方式1",
      "import Vue from 'vue';",
      "// 引入封装的复用的组件 注意xxx组件名应采用大驼峰命名法",
      "Vue.component('GTable', GTable); ",
      "// 在全局用Vue.component()方法全局注册",
      "import GTable from '@/components/g-table/index.vue';",
      "",
      "// 方式2 components/index",
      "import GTable from '@/components/g-table/index.vue'",
      "export default {",
      "  install(Vue) {",
      "    Vue.component('GTable', GTable)",
      "  }",
      "}",
      "",
      "import components from '@/components/index';",
      "Vue.use(components);"
    ],
    "description": "vue2全局组件"
  },

  "vue3全局组件": {
    "prefix": ["vueglobalcomponents3","globalcomponents3"],
    "body": [
      "// 方式1",
      "import { createApp } from 'vue'",
      "import App from './App.vue'",
      "import GTable from '@/components/g-table/index.vue'",
      "const app = createApp(App)",
      "app.component('GTable',GTable)",
      "app.mount('#app')",
      "",
      "// 方式2 components/index",
      "import GTable from './g-table/index.vue'",
      "export default function install(app) {",
      "  app.component('GTable',GTable)",
      "}",
      "",
      "import { createApp } from 'vue'",
      "import App from './App.vue'",
      "import components from '@/components/index'",
      "createApp(App).use(components).mount('#app')"
    ],
    "description": "vue3全局组件"
  },

  "网页复制文本": {
    "prefix": ["jscopy","copy"],
    "body": [
      "function copyPersonURL(content) {",
      "  try {",
      "    if (window.ClipboardData) {",
      "        const status = window.clipboardData.setData('text', content);",
      "        if (status) {",
      "          alert('链接复制成功');",
      "          return;",
      "        }",
      "        alert('复制失败，可手动选择复制');",
      "    } else {",
      "        ;(function (content) {",
      "            document.oncopy = function (e) {",
      "                e.clipboardData.setData('text', content)",
      "                e.preventDefault()",
      "                document.oncopy = null",
      "                alert('链接复制成功')",
      "            }",
      "        })(content)",
      "       let status = document.execCommand('Copy');",
      "       if (!status) {",
      "        alert('复制失败，可手动选择复制');",
      "       }",
      "    }",
      "  }",
      "  catch(err){",
      "    alert('复制失败，可手动选择复制')",
      "  }",
      "}"
    ],
    "description": "网页复制文本"
  },

  "数组map": {
    "prefix": ["jsmap", "map"],
    "body": [
      "${1:array}.map((item, index) => console.log('---- ${1:array} ----:', item, index))"
    ],
    "description": "数组map"
  },

  "数组foreach": {
    "prefix": ["jsforeach","foreach"],
    "body": [
      "${1:array}.forEach((item, index) => console.log('---- ${1:array} ----:', item, index));"
    ],
    "description": "数组foreach"
  },

  "ie浏览器": {
    "prefix": ["jsie","ie"],
    "body": [
      " if (!!window.ActiveXObject || \"ActiveXObject\" in window){",
      "     alert('IE浏览器')",
      " }else{",
      "     alert('不是IE浏览器')",
      " }"
    ],
    "description": "ie浏览器"
  },

  "随机颜色": {
    "prefix": ["jsrandomcolor","randomcolor"],
    "body": [
      "const randomColor = () => `#${Math.floor(Math.random() * 0xffffff).toString(16).padEnd(6, \"0\")}`;"
    ],
    "description": "随机颜色"
  },

  "对象是否有key": {
    "prefix": ["jsemptyobj", "emptyobj"],
    "body": [
      "const isEmptyObj = obj => Reflect.ownKeys(obj).length === 0 && obj.constructor === Object;"
    ],
    "description": "对象是否有key"
  },

  "数组去重": {
    "prefix": ["jsarrayunique","arrayunique","数组去重"],
    "body": [
      "const uniqueArr = (arr) => [...new Set(arr)];"
    ],
    "description": "数组去重"
  },

  "称动端禁止滚动": {
    "prefix": ["jsdisablescroll", "disablescroll"],
    "body": [
      "<body ontouchmove=\"event.preventDefault()\"></body>",
      "document.addEventListener('touchmove', function(event) {",
      "  event.preventDefault();",
      "});"
    ],
    "description": "称动端禁止滚动"
  },

  "代码运行时间统计": {
    "prefix": ["jstimestatistics", "timestatistics"],
    "body": [
      "console.time('testStart');",
      "console.log('test');",
      "console.timeEnd('testStart');"
    ],
    "description": "代码运行时间统计"
  },

  "添加事件": {
    "prefix": ["jsaddevent","addevent"],
    "body": [
      "//跨浏览器添加事件",
      "function addEvent(obj,type,fn){",
      "    if(obj.addEventListener){",
      "        obj.addEventListener(type,fn,false);",
      "    }else if(obj.attachEvent){//IE",
      "        obj.attchEvent('on'+type,fn);",
      "    }",
      "}"
    ],
    "description": "添加事件"
  },

  "移除事件": {
    "prefix": ["jsremoveevent","removeevent"],
    "body": [
      "//跨浏览器移除事件",
      "function removeEvent(obj,type,fn){",
      "    if(obj.removeEventListener){",
      "        obj.removeEventListener(type,fn,false);",
      "    }else if(obj.detachEvent){//兼容IE",
      "        obj.detachEvent('on'+type,fn);",
      "    }",
      "}"
    ],
    "description": "移除事件"
  },

  "滚动条位置": {
    "prefix": ["jsscrollpos","scrollpos","滚动条位置"],
    "body": [
      "//跨浏览器获取滚动条位置",
      "function getScrollPos(){",
      "    return{",
      "        top: document.documentElement.scrollTop || document.body.scrollTop,",
      "        left : document.documentElement.scrollLeft || document.body.scrollLeft;",
      "    }",
      "}"
    ],
    "description": "获取滚动条位置"
  },

  "窗口大小": {
    "prefix": ["jswindowsize", "windowsize", "窗口大小"],
    "body": [
      "//跨浏览器获取可视窗口大小",
      "function  getWindowSize () {",
      "    if(typeof window.innerWidth !='undefined') { //IE8及以下undefined",
      "        return{",
      "            width : window.innerWidth,",
      "            height : window.innerHeight",
      "        }",
      "    }else{",
      "        return {",
      "            width : document.documentElement.clientWidth,",
      "            height : document.documentElement.clientHeight",
      "        }",
      "    }",
      "}"
    ],
    "description": "获取窗口大小"
  },

  "数组浅拷贝": {
    "prefix": ["jsclonearray", "clonearray","浅拷贝数组"],
    "body": [
      "const ${2:copyArray}= ${1:copyArray}.slice(0);",
      "const ${2:copyArray}= ${1:copyArray}.concat();",
      "const ${2:copyArray}= [...${1:copyArray}];"
    ],
    "description": "数组浅拷贝"
  },

  "对象浅拷贝": {
    "prefix": ["jscloneobj","cloneobj","浅拷贝对象"],
    "body": [
      "let ${1:mergeObj} = Object.assign({}, ${1:copyObj});"
    ],
    "description": "对象浅拷贝"
  },

  "随机数字数组": {
    "prefix": ["jsrandomnumarray", "randomnumarray", "随机数字数组"],
    "body": [
      "const getNumArr = (length, limit) => Array.from({ length }, () => Math.floor(Math.random() * limit));"
    ],
    "description": "随机数字数组（可指定数组个数和最大值）"
  },

  "指定时间点的倒计时": {
    "prefix": ["jscountdown", "countdown"],
    "body": [
      "/**",
      " * 倒计时函数",
      " * @param {string|number} date ",
      " * @returns ",
      " */",
      "function countdown(date){",
      "  var endtime = new Date(date);",
      "  var nowtime = new Date();",
      "  if (nowtime >= endtime) {",
      "      return null;",
      "  }",
      "  var leftmillisecond = endtime.getTime() - nowtime.getTime();",
      "  var leftsecond = parseInt(leftmillisecond / 1000);",
      "  if (leftsecond < 0) {",
      "      leftsecond = 0;",
      "  }",
      "  const days = parseInt(leftsecond / 3600 / 24);",
      "  const hours = parseInt((leftsecond / 3600) % 24);",
      "  const minutes = parseInt((leftsecond / 60) % 60); ",
      "  const seconds = parseInt(leftsecond % 60);",
      "  const milliseconds = leftmillisecond % 1000;",
      "  return {",
      "    days,",
      "    hours,",
      "    minutes,",
      "    seconds,",
      "    milliseconds",
      "  }",
      "}"
    ],
    "description": "指定时间点的倒计时"
  },

  "随机数字": {
    "prefix": ["jsrandomnum", "randomnum"],
    "body": [
      "/**",
      " * 随机产生一个数字",
      " * @param {number} lower ",
      " * @param {number} upper ",
      " * @returns ",
      " */",
      "function randomNum(lower, upper) {",
      "  var sum = upper - lower + 1; //总数-第一个数+1",
      "  return Math.floor(Math.random() * sum + lower);",
      "};"
    ],
    "description": "随机数字"
  },

  "延时器": {
    "prefix": ["jssettimeout","settimeout","jstime","time"],
    "body": [
      "const ${2:timer} = setTimeout(() => {",
      "  ${3:code...}",
      "}, ${1:300});"
    ],
    "description": "延时多少毫秒后执行"
  },

  "定时器": {
    "prefix": ["jssetinterval","setinterval","jstime","time"],
    "body": [
      "const ${2:timer} = setInterval(() => {",
      "  ${3:code...}",
      "}, ${1:300});"
    ],
    "description": "每隔多长时间执行一次"
  },

  "ifplus": {
    "prefix": ["ifplus","jsifplus"],
    "body": [
      "// #ifdef ${1:WEB}",
      "\t$0",
      "// #endif"
    ],
    "description": "ifplus-loader专用条件编译语句"
  }
}