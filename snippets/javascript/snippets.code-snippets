{
  "jsvar": {
    "prefix": ["var", "jsvar"],
    "body": [
      "${1|const,let,var|} ${2:example} = ${3};"
    ],
    "description": "定义变量"
  },
  "jsfor": {
    "prefix": ["for","jsfor"],
    "body": [
      "for(let ${2:i}=0; i<${1:array}.length; ${2:i}++) {",
      "\tlet ${3:item} = ${1:array}[${2:i}];",
      "\t$0",
      "}"
    ],
    "description": "普通for循环"
  },

  "jsforof": {
    "prefix": ["forof","jsforof"],
    "body": [
      "for(${2:item} of ${1:obj}) {",
      "\t$0",
      "}"
    ],
    "description": "for-of循环,ES6新引入循环,较推荐的循环用法"
  },

  "jsforin": {
    "prefix": ["forin","jsforin"],
    "body": [
      "for(${2:key} in ${1:obj}) {",
      "\tlet ${3:item} = obj[${2:key}];",
      "\t$0",
      "}"
    ],
    "description": "for-in循环,并不适合用来遍历 Array 中的元素，其更适合遍历对象中的属性"
  },

  "jsif": {
    "prefix": ["if", "jsif"],
    "body": [
      "if (${1:condition})",
      "\t{",
      "\t\t$0",
      "\t}"
    ],
    "description": "js下if语句"
  },

  "jsifelse": {
    "prefix": ["else", "jselse"],
    "body": [
      "\telse",
      "\t{",
      "\t\t$1",
      "\t}",
    ],
    "description": "js下的else语句"
  },

  "jselseif": {
    "prefix": ["elseif", "jselseif"],
    "body": [
      "\telse if (${1:condition})",
      "\t{",
      "\t\t$0",
      "\t}"
    ],
    "description": "js下的elseif语句"
  },

  "jsswitch": {
    "prefix": ["switch", "jsswitch"],
    "body": [
      "switch(${1:label}) {",
      "\tcase ${2:label}:",
      "\t\t${3:code}",
      "\t\tbreak;",
      "\tdefault:",
      "\t\t${4:code}",
      "}"
    ],
    "description": "js下的switch语句"
  },

  "jsfunction": {
    "prefix": ["function","jsfunction"],
    "body": [
      "/**",
      "* ${1:函数注释}",
      "* @param {${4|Number,String,Array,Object,Function|}} ${3:param} 函数参数",
      "*/",
      "function ${2:test}(${3:param}) {",
      "\t${0}",
      "}"
    ],
    "description": "js下的函数定义语句"
  },

  "jsfunctionnotes": {
    "prefix": ["functionnotes","jsfunctionnotes"],
    "body": [
      "/**",
      "* ${1:函数注释}",
      "* @param {${4|Number,String,Array,Object,Function|}} ${3:param} 函数参数",
      "*/"
    ],
    "description": "生成函数注释"
  },

  "js_log": {
    "prefix": ["log","jslog"],
    "body": [
      "console.log($1);"
    ],
    "description": "js下console.log语句"
  },

  "js_log-": {
    "prefix": ["log-","jslog-"],
    "body": [
      "console.log('----$1----:'$2);"
    ],
    "description": "js下console.log语句"
  },

  "js_info": {
    "prefix": ["info","jsinfo"],
    "body": [
      "console.info($1);"
    ],
    "description": "js下console.info语句"
  },

  "js_error": {
    "prefix": ["error","jserror"],
    "body": [
      "console.error($1);"
    ],
    "description": "js下console.error语句"
  },

  "js_class": {
    "prefix": ["class","jsclass"],
    "body": [
      "class ${1:Class} {",
      "\tconstructor(${2}) {",
      "\t\tsuper(${2})",
      "\t}",
      "\n",
      "\t${3:fn}() {",
      "\t}",
      "}"
    ],
    "description": "js下类的定义语句"
  },

  "js_promise": {
    "prefix": ["promise", "jspromise"],
    "body": [
      "new Promise((resolve, reject) => {",
      "\t$1",
      "\tif (${2:condition}){",
      "\t\tresolve(${3:val});",
      "\t} else {",
      "\t\treject(${3:err});",
      "\t}",
      "});"
    ],
    "description": "js下Promise语句"
  },

  "jsregex": {
    "prefix": ["regex", "jsregex"],
    "body": [
      "//用户名正则，4到16位（字母，数字，下划线，减号）",
      "/^[a-zA-Z0-9_-]{4,16}$/;",
      "//密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符",
      "/^.*(?=.{6,})(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*? ]).*$/",
      "//验证邮箱",
      "/^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/",
      "//验证手机号",
      "/^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\\d{8}$/",
      "//验证URL",
      "/^http(s?):\\/\\/.+\\./",
     "//验证身份证号码",
      "/(^\\d{15}$)|(^\\d{17}([0-9]|X|x)$)/",
      "//匹配中文字符的正则表达式",
      "/[\\u4e00-\\u9fa5]/",
      "//匹配双字节字符(包括汉字在内)",
      "/[^\\x00-\\xff]/",
      "//同内电话号码",
      "/\\d{3}-\\d{8}|\\d{4}-\\d{7}/"
    ],
    "description": "js下常用正则表达式集合"
  },

  "jstry": {
    "prefix": ["try","jstry"],
    "body": [
      "try {",
      "\t$1",
      "}",
      "catch(err){",
      "\t$2",
      "}"
    ],
    "description": "js下try catch语句"
  },

  "jsthrottle": {
    "prefix": ["jsthrottle","throttle","jsjl"],
    "body": [
      "/**",
      "* @desc 函数节流",
      "* @param func 函数",
      "* @param wait 延迟执行毫秒数",
      "* @param type 1 时间戳版，2 定时器版",
      "*/",
      "function throttle(func, wait, type = 1) {",
      "  let previous = Date.now(),",
      "  timeout=null;",
      "  return function() {",
      "    let context = this;",
      "    let args = arguments;",
      "    if (type === 1) {",
      "      let now = Date.now();",
      "      if (now - previous > wait) {",
      "        func.apply(context, args);",
      "        previous = now;",
      "      }",
      "    } else if (type === 2) {",
      "      if (!timeout) {",
      "        timeout = setTimeout(() => {",
      "          timeout = null;",
      "          func.apply(context, args)",
      "        }, wait)",
      "      }",
      "    }",
      "  }",
      "}",
      "${0}"
    ],
    "description": "js下节流代码段"
  },
  

  "jsdebounce": {
    "prefix": ["jsdebounce","debounce","jshd"],
    "body": [
      "/**",
      "* @desc 函数防抖",
      "* @param func 目标函数",
      "* @param wait 延迟执行毫秒数",
      "* @param immediate true - 立即执行， false - 延迟执行",
      "*/",
      "function debounce(func, wait = 300, immediate = true) {",
      "  let timer;",
      "  return function() {",
      "    let context = this,",
      "    args = arguments;",
      "    if (timer) clearTimeout(timer);",
      "    if (immediate && !timer) {",
      "      func.apply(context, args);",
      "    }",
      "    timer = setTimeout(() => {",
      "      func.apply(context, args)",
      "    }, wait)",
      "  }",
      "${0}"
    ],
    "description": "js下防抖代码段"
  },

  "jsstore": {
    "prefix": ["jsstore","store"],
    "body": [
      "import Vue from 'vue'",
      "import Vuex from 'vuex'",
      "",
      "Vue.use(Vuex);",
      "",
      "export default new Vuex.Store({",
        "\tstate: {",
        "\t},",
        "\tmutations: {",
        "\t},",
        "\tactions: {",
        "\t},",
        "\tgetters: {",
        "\t},",
        "\tmodules: {",
        "\t}",
      "})"
    ],
    "description": "vue状态管理主文件模板代码段"
  },

  "jsstoremodule": {
    "prefix": ["jsstoremodule","storemodule"],
    "body": [
      "const ${1:storeModule} = {",
        "namespaced: true,",
        "state: {",
        "},",
        "mutations: {",
        "},",
        "actions: {",
        "},",
        "getters: {",
        "}",
      "}",
      "export default ${1:storeModule};"
    ],
    "description": "vue状态管理module模板代码段"
  },

  "jsdialogdrag": {
    "prefix": ["jsdialogdrag","dialogdrag"],
    "body": [
      "import Vue from 'vue'",

      "// v-dialogDrag: 弹窗拖拽",
      "Vue.directive('dialogDrag', {",
        "\tbind(el, binding, vnode, oldVnode) {",
          "\t\tconst dialogHeaderEl = el.querySelector('.el-dialog__header');",
          "\t\tconst dragDom = el.querySelector('.el-dialog');",
          "\t\tdialogHeaderEl.style.cursor = 'move';",

          "\t\t// 获取原有属性 ie dom元素.currentStyle 火狐谷歌 window.getComputedStyle(dom元素, null);",
          "\t\tconst sty = dragDom.currentStyle || window.getComputedStyle(dragDom, null);",

          "\t\tdialogHeaderEl.onmousedown = (e) => {",
            "\t\t\t// 鼠标按下，计算当前元素距离可视区的距离",
            "\t\t\tconst disX = e.clientX - dialogHeaderEl.offsetLeft;",
            "\t\t\tconst disY = e.clientY - dialogHeaderEl.offsetTop;",

            "\t\t\t// 获取到的值带px 正则匹配替换",
            "\t\t\tlet styL, styT",

            "\t\t\t// 注意在ie中 第一次获取到的值为组件自带50% 移动之后赋值为px",
            "\t\t\tif (sty.left.includes('%')) {",
              "\t\t\t\tstyL = +document.body.clientWidth * (+sty.left.replace(/\\%/g, '') / 100);",
              "\t\t\t\tstyT = +document.body.clientHeight * (+sty.top.replace(/\\%/g, '') / 100);",
            "\t\t\t} else {",
              "\t\t\t\tstyL = +sty.left.replace(/\\px/g, '');",
              "\t\t\t\tstyT = +sty.top.replace(/\\px/g, '');",
            "\t\t\t}",
            "\t\t\tconsole.log('--dialogHeaderEl--:0', styL, styT);",

            "\t\t\tdocument.onmousemove = function(e) {",
              "\t\t\t\t// 通过事件委托，计算移动的距离",
              "\t\t\t\tconst l = e.clientX - disX;",
              "\t\t\t\tconst t = e.clientY - disY;",

              "\t\t\t\t// 移动当前元素",
              "\t\t\t\tdragDom.style.left = `${l + styL}px`;",
              "\t\t\t\tdragDom.style.top = `${t + styT}px`;",

              "\t\t\t\t// 将此时的位置传出去",
              "\t\t\t\t// binding.value({x:e.pageX,y:e.pageY})",
            "\t\t\t}",

            "\t\t\tdocument.onmouseup = function(e) {",
              "\t\t\t\tdocument.onmousemove = null",
              "\t\t\t\tdocument.onmouseup = null",
            "\t\t\t}",
          "\t\t}",
        "\t}",
      "});"
    ],
    "description": "el弹窗拖拽指令"
  },
  
  "js_rem": {
    "prefix": ["rem", "jsrem"],
    "body":[
      "(function(doc, win) {",
        "var docEl = doc.documentElement,",
          "resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',",
          "recalc = function() {",
            "var clentWidth = docEl.clientWidth;",
            "var container = doc.getElementById('app');",
            "if (clentWidth > 828) {",
              "docEl.style.fontSize = '100px';",
              "container.style.width = '828px';",
            "} else {",
              "var remFontSize = clentWidth / 8.28;",
              "docEl.style.fontSize = remFontSize + 'px';",
              "container.style.width = 'auto';",
            "}",
          "};",
        "if (!doc.addEventListener) return;",
        "win.addEventListener(resizeEvt, recalc, false);",
        "doc.addEventListener('DOMContentLoaded', recalc, false);",
      "})(document, window);"
    ],
    "description": "移动端rem计算代码段"
  },

  "useState Hooks": {
    "prefix": ["ushk", "jsushk"],
    "body": [
      "const [${1:example}, set${1:example}] = useState($(2));"
    ],
    "description": "useState Hooks生成"
  },

  "import{}": {
    "prefix": ["import", "jsimport"],
    "body": [
      "import { ${1:example}} from '${2}';"
    ],
    "description": "import语句"
  },
  "importdefault": {
    "prefix": ["importdefault", "jsimportdefault"],
    "body": [
      "import ${1:example} from '${2}';"
    ],
    "description": "importdefault"
  },
  "jscsfn": {
    "prefix": ["csfn", "jscsfn"],
    "body": [
      "const ${1:example} = (${2}) => {",
      "  ${3}",
      "}"
    ],
    "description": "js const定义箭头函数"
  },

  "js?": {
    "prefix": ["js?", "3m"],
    "body": [
      "${1:example} ? ${2:example} : ${3:example}"
    ],
    "description": "js 三目运算代码段"
  },

  "ifplus": {
    "prefix": ["ifplus","jsifplus"],
    "body": [
      "// #ifdef ${1:WEB}",
      "\t$0",
      "// #endif"
    ],
    "description": "ifplus-loader专用条件编译语句"
  }
}