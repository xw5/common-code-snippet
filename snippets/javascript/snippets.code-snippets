{
  "jsfor": {
    "prefix": ["for","jsfor"],
    "body": [
      "for(let ${2:i}=0; i<${1:array}.length; ${2:i}++) {",
      "\tlet ${3:item} = ${1:array}[${2:i}];",
      "\t$0",
      "}"
    ],
    "description": "普通for循环"
  },

  "jsforof": {
    "prefix": ["forof","jsforof"],
    "body": [
      "for(${2:item} of ${1:obj}) {",
      "\t$0",
      "}"
    ],
    "description": "for-of循环,ES6新引入循环,较推荐的循环用法"
  },

  "jsforin": {
    "prefix": ["forin","jsforin"],
    "body": [
      "for(${2:key} in ${1:obj}) {",
      "\tlet ${3:item} = obj[${2:key}];",
      "\t$0",
      "}"
    ],
    "description": "for-in循环,并不适合用来遍历 Array 中的元素，其更适合遍历对象中的属性"
  },

  "jsif": {
    "prefix": ["if", "jsif"],
    "body": [
      "if (${1:condition})",
      "\t{",
      "\t\t$0",
      "\t}"
    ],
    "description": "js下if语句"
  },

  "jsifelse": {
    "prefix": ["else", "jselse"],
    "body": [
      "\telse",
      "\t{",
      "\t\t$1",
      "\t}",
    ],
    "description": "js下的else语句"
  },

  "jselseif": {
    "prefix": ["elseif", "jselseif"],
    "body": [
      "\telse if (${1:condition})",
      "\t{",
      "\t\t$0",
      "\t}"
    ],
    "description": "js下的elseif语句"
  },

  "jsswitch": {
    "prefix": ["switch", "jsswitch"],
    "body": [
      "switch(${1:label}) {",
      "\tcase ${2:label}:",
      "\t\t${3:code}",
      "\t\tbreak;",
      "\tdefault:",
      "\t\t${4:code}",
      "}"
    ],
    "description": "js下的switch语句"
  },

  "jsfunction": {
    "prefix": ["function","jsfunction"],
    "body": [
      "/**",
      "* ${1:函数注释}",
      "* @param {${4|Number,String,Array,Object,Function|}} ${3:param} 函数参数",
      "*/",
      "function ${2:test}(${3:param}) {",
      "\t${0}",
      "}"
    ],
    "description": "js下的函数定义语句"
  },

  "jsfunctionnotes": {
    "prefix": ["functionnotes","jsfunctionnotes"],
    "body": [
      "/**",
      "* ${1:函数注释}",
      "* @param {${4|Number,String,Array,Object,Function|}} ${3:param} 函数参数",
      "*/"
    ],
    "description": "生成函数注释"
  },

  "js_log": {
    "prefix": ["log","jslog"],
    "body": [
      "console.log($1);"
    ],
    "description": "js下console.log语句"
  },

  "js_info": {
    "prefix": ["info","jsinfo"],
    "body": [
      "console.info($1);"
    ],
    "description": "js下console.info语句"
  },

  "js_error": {
    "prefix": ["error","jserror"],
    "body": [
      "console.error($1);"
    ],
    "description": "js下console.error语句"
  },

  "js_class": {
    "prefix": ["class","jsclass"],
    "body": [
      "class ${1:Class} {",
      "\tconstructor(${2}) {",
      "\t\tsuper(${2})",
      "\t}",
      "\n",
      "\t${3:fn}() {",
      "\t}",
      "}"
    ],
    "description": "js下类的定义语句"
  },

  "js_promise": {
    "prefix": ["promise", "jspromise"],
    "body": [
      "new Promise((resolve, reject) => {",
      "\t$1",
      "\tif (${2:condition}){",
      "\t\tresolve(${3:val});",
      "\t} else {",
      "\t\treject(${3:err});",
      "\t}",
      "});"
    ],
    "description": "js下Promise语句"
  },

  "jsregex": {
    "prefix": ["regex", "jsregex"],
    "body": [
      "//用户名正则，4到16位（字母，数字，下划线，减号）",
      "/^[a-zA-Z0-9_-]{4,16}$/;",
      "//密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符",
      "/^.*(?=.{6,})(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*? ]).*$/",
      "//验证邮箱",
      "/^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/",
      "//验证手机号",
      "/^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\\d{8}$/",
      "//验证URL",
      "/^http(s?):\\/\\/.+\\./",
     "//验证身份证号码",
      "/(^\\d{15}$)|(^\\d{17}([0-9]|X|x)$)/",
      "//匹配中文字符的正则表达式",
      "/[\\u4e00-\\u9fa5]/",
      "//匹配双字节字符(包括汉字在内)",
      "/[^\\x00-\\xff]/",
      "//同内电话号码",
      "/\\d{3}-\\d{8}|\\d{4}-\\d{7}/"
    ],
    "description": "js下常用正则表达式集合"
  },

  "jstry": {
    "prefix": ["try","jstry"],
    "body": [
      "try {",
      "\t$1",
      "}",
      "catch(err){",
      "\t$2",
      "}"
    ],
    "description": "js下try catch语句"
  },

  "ifplus": {
    "prefix": ["ifplus","jsifplus"],
    "body": [
      "// #ifdef ${1:WEB}",
      "\t$0",
      "// #endif"
    ],
    "description": "ifplus-loader专用条件编译语句"
  },
}