{
  "jsvar": {
    "prefix": ["var", "jsvar"],
    "body": [
      "${1|const,let,var|} ${2:example} = ${3};"
    ],
    "description": "定义变量"
  },
  "jsfor": {
    "prefix": ["for","jsfor"],
    "body": [
      "for(let ${2:i}=0; i<${1:array}.length; ${2:i}++) {",
      "\tlet ${3:item} = ${1:array}[${2:i}];",
      "\t$0",
      "}"
    ],
    "description": "普通for循环"
  },

  "jsforof": {
    "prefix": ["forof","jsforof"],
    "body": [
      "for(${2:item} of ${1:obj}) {",
      "\t$0",
      "}"
    ],
    "description": "for-of循环,ES6新引入循环,较推荐的循环用法"
  },

  "jsforin": {
    "prefix": ["forin","jsforin"],
    "body": [
      "for(${2:key} in ${1:obj}) {",
      "\tlet ${3:item} = obj[${2:key}];",
      "\t$0",
      "}"
    ],
    "description": "for-in循环,并不适合用来遍历 Array 中的元素，其更适合遍历对象中的属性"
  },

  "jsif": {
    "prefix": ["if", "jsif"],
    "body": [
      "if (${1:condition}) {",
      "  $2",
      "}"
    ],
    "description": "js下if语句"
  },

  "jselse": {
    "prefix": ["else", "jselse"],
    "body": [
      "else {",
      "  $1",
      "}"
    ],
    "description": "js下的else语句"
  },

  "jselseif": {
    "prefix": ["elseif", "jselseif"],
    "body": [
      "else if (${1:条件}) {",
      "  $2",
      "}"
    ],
    "description": "js下的elseif语句"
  },

  "jsswitch": {
    "prefix": ["switch", "jsswitch"],
    "body": [
      "switch(${1:label}) {",
      "\tcase ${2:label}:",
      "\t\t${3:code}",
      "\t\tbreak;",
      "\tdefault:",
      "\t\t${4:code}",
      "}"
    ],
    "description": "js下的switch语句"
  },

  "jsfunction": {
    "prefix": ["function","jsfunction"],
    "body": [
      "/**",
      "* ${1:函数注释}",
      "* @param {${4|Number,String,Array,Object,Function|}} ${3:param} 函数参数",
      "*/",
      "function ${2:test}(${3:param}) {",
      "\t${0}",
      "}"
    ],
    "description": "js下的函数定义语句"
  },

  "jsfunctionnotes": {
    "prefix": ["functionnotes","jsfunctionnotes"],
    "body": [
      "/**",
      "* ${1:函数注释}",
      "* @param {${4|Number,String,Array,Object,Function|}} ${3:param} 函数参数",
      "*/"
    ],
    "description": "生成函数注释"
  },

  "jslog": {
    "prefix": ["log","jslog"],
    "body": [
      "console.${1|log,info,error|}($2);"
    ],
    "description": "js下console.log语句"
  },

  "jslog-": {
    "prefix": ["log-","jslog-"],
    "body": [
      "console.${1|log,info,error|}('----$2----:', $3);"
    ],
    "description": "js下console.log语句"
  },

  "jsclass": {
    "prefix": ["class","jsclass"],
    "body": [
      "class ${1:Class} {",
      "\tconstructor(${2}) {",
      "\t\tsuper(${2})",
      "\t}",
      "\n",
      "\t${3:fn}() {",
      "\t}",
      "}"
    ],
    "description": "js下类的定义语句"
  },

  "jspromise": {
    "prefix": ["promise", "jspromise"],
    "body": [
      "new Promise((resolve, reject) => {",
      "\t$1",
      "\tif (${2:condition}){",
      "\t\tresolve(${3:val});",
      "\t} else {",
      "\t\treject(${3:err});",
      "\t}",
      "});"
    ],
    "description": "js下Promise语句"
  },

  "jsregex": {
    "prefix": ["regex", "jsregex"],
    "body": [
      "//用户名正则，4到16位（字母，数字，下划线，减号）",
      "/^[a-zA-Z0-9_-]{4,16}$/;",
      "//密码强度正则，最少6位，包括至少1个大写字母，1个小写字母，1个数字，1个特殊字符",
      "/^.*(?=.{6,})(?=.*\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*[!@#$%^&*? ]).*$/",
      "//验证邮箱",
      "/^\\w+([-+.]\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/",
      "//验证手机号",
      "/^((13[0-9])|(14[5|7])|(15([0-3]|[5-9]))|(18[0,5-9]))\\d{8}$/",
      "//验证URL",
      "/^http(s?):\\/\\/.+\\./",
     "//验证身份证号码",
      "/(^\\d{15}$)|(^\\d{17}([0-9]|X|x)$)/",
      "//匹配中文字符的正则表达式",
      "/[\\u4e00-\\u9fa5]/",
      "//匹配双字节字符(包括汉字在内)",
      "/[^\\x00-\\xff]/",
      "//同内电话号码",
      "/\\d{3}-\\d{8}|\\d{4}-\\d{7}/"
    ],
    "description": "js下常用正则表达式集合"
  },

  "jstry": {
    "prefix": ["try","jstry"],
    "body": [
      "try {",
      "\t$1",
      "}",
      "catch(err){",
      "\t$2",
      "}"
    ],
    "description": "js下try catch语句"
  },

  "jsthrottle": {
    "prefix": ["jsthrottle","throttle","jsjl"],
    "body": [
      "/**",
      "* @desc 函数节流",
      "* @param func 函数",
      "* @param wait 延迟执行毫秒数",
      "* @param type 1 时间戳版，2 定时器版",
      "*/",
      "function throttle(func, wait, type = 1) {",
      "  let previous = Date.now(),",
      "  timeout=null;",
      "  return function() {",
      "    let context = this;",
      "    let args = arguments;",
      "    if (type === 1) {",
      "      let now = Date.now();",
      "      if (now - previous > wait) {",
      "        func.apply(context, args);",
      "        previous = now;",
      "      }",
      "    } else if (type === 2) {",
      "      if (!timeout) {",
      "        timeout = setTimeout(() => {",
      "          timeout = null;",
      "          func.apply(context, args)",
      "        }, wait)",
      "      }",
      "    }",
      "  }",
      "}",
      "${0}"
    ],
    "description": "js下节流代码段"
  },
  

  "jsdebounce": {
    "prefix": ["jsdebounce","debounce","jshd"],
    "body": [
      "/**",
      "* @desc 函数防抖",
      "* @param func 目标函数",
      "* @param wait 延迟执行毫秒数",
      "* @param immediate true - 立即执行， false - 延迟执行",
      "*/",
      "function debounce(func, wait = 300, immediate = true) {",
      "  let timer;",
      "  return function() {",
      "    let context = this,",
      "    args = arguments;",
      "    if (timer) clearTimeout(timer);",
      "    if (immediate && !timer) {",
      "      func.apply(context, args);",
      "    }",
      "    timer = setTimeout(() => {",
      "      func.apply(context, args)",
      "    }, wait)",
      "  }",
      "${0}"
    ],
    "description": "js下防抖代码段"
  },

  "jsstore": {
    "prefix": ["jsstore","store"],
    "body": [
      "import Vue from 'vue'",
      "import Vuex from 'vuex'",
      "",
      "Vue.use(Vuex);",
      "",
      "export default new Vuex.Store({",
        "\tstate: {",
        "\t},",
        "\tmutations: {",
        "\t},",
        "\tactions: {",
        "\t},",
        "\tgetters: {",
        "\t},",
        "\tmodules: {",
        "\t}",
      "})"
    ],
    "description": "vue状态管理主文件模板代码段"
  },

  "jsstoremodule": {
    "prefix": ["jsstoremodule","storemodule"],
    "body": [
      "const ${1:storeModule} = {",
        "namespaced: true,",
        "state: {",
        "},",
        "mutations: {",
        "},",
        "actions: {",
        "},",
        "getters: {",
        "}",
      "}",
      "export default ${1:storeModule};"
    ],
    "description": "vue状态管理module模板代码段"
  },

  "jsdialogdrag": {
    "prefix": ["jsdialogdrag","dialogdrag"],
    "body": [
      "import Vue from 'vue'",

      "// v-dialogDrag: 弹窗拖拽",
      "Vue.directive('dialogDrag', {",
        "\tbind(el, binding, vnode, oldVnode) {",
          "\t\tconst dialogHeaderEl = el.querySelector('.el-dialog__header');",
          "\t\tconst dragDom = el.querySelector('.el-dialog');",
          "\t\tdialogHeaderEl.style.cursor = 'move';",

          "\t\t// 获取原有属性 ie dom元素.currentStyle 火狐谷歌 window.getComputedStyle(dom元素, null);",
          "\t\tconst sty = dragDom.currentStyle || window.getComputedStyle(dragDom, null);",

          "\t\tdialogHeaderEl.onmousedown = (e) => {",
            "\t\t\t// 鼠标按下，计算当前元素距离可视区的距离",
            "\t\t\tconst disX = e.clientX - dialogHeaderEl.offsetLeft;",
            "\t\t\tconst disY = e.clientY - dialogHeaderEl.offsetTop;",

            "\t\t\t// 获取到的值带px 正则匹配替换",
            "\t\t\tlet styL, styT",

            "\t\t\t// 注意在ie中 第一次获取到的值为组件自带50% 移动之后赋值为px",
            "\t\t\tif (sty.left.includes('%')) {",
              "\t\t\t\tstyL = +document.body.clientWidth * (+sty.left.replace(/\\%/g, '') / 100);",
              "\t\t\t\tstyT = +document.body.clientHeight * (+sty.top.replace(/\\%/g, '') / 100);",
            "\t\t\t} else {",
              "\t\t\t\tstyL = +sty.left.replace(/\\px/g, '');",
              "\t\t\t\tstyT = +sty.top.replace(/\\px/g, '');",
            "\t\t\t}",
            "\t\t\tconsole.log('--dialogHeaderEl--:0', styL, styT);",

            "\t\t\tdocument.onmousemove = function(e) {",
              "\t\t\t\t// 通过事件委托，计算移动的距离",
              "\t\t\t\tconst l = e.clientX - disX;",
              "\t\t\t\tconst t = e.clientY - disY;",

              "\t\t\t\t// 移动当前元素",
              "\t\t\t\tdragDom.style.left = `${l + styL}px`;",
              "\t\t\t\tdragDom.style.top = `${t + styT}px`;",

              "\t\t\t\t// 将此时的位置传出去",
              "\t\t\t\t// binding.value({x:e.pageX,y:e.pageY})",
            "\t\t\t}",

            "\t\t\tdocument.onmouseup = function(e) {",
              "\t\t\t\tdocument.onmousemove = null",
              "\t\t\t\tdocument.onmouseup = null",
            "\t\t\t}",
          "\t\t}",
        "\t}",
      "});"
    ],
    "description": "el弹窗拖拽指令"
  },
  
  "jsrem": {
    "prefix": ["rem", "jsrem"],
    "body":[
      "(function(doc, win) {",
        "var docEl = doc.documentElement,",
          "resizeEvt = 'orientationchange' in window ? 'orientationchange' : 'resize',",
          "recalc = function() {",
            "var clentWidth = docEl.clientWidth;",
            "var container = doc.getElementById('app');",
            "if (clentWidth > 828) {",
              "docEl.style.fontSize = '100px';",
              "container.style.width = '828px';",
            "} else {",
              "var remFontSize = clentWidth / 8.28;",
              "docEl.style.fontSize = remFontSize + 'px';",
              "container.style.width = 'auto';",
            "}",
          "};",
        "if (!doc.addEventListener) return;",
        "win.addEventListener(resizeEvt, recalc, false);",
        "doc.addEventListener('DOMContentLoaded', recalc, false);",
      "})(document, window);"
    ],
    "description": "移动端rem计算代码段"
  },

  "jsusestatefunction": {
    "prefix": ["jsusestatefunction", "usestatefunction"],
    "body": [
      "const [${1:state}, set${1:state}] = useState(() => {",
      "  return ${3:initialState};",
      "});"
    ],
    "description": "usestate函数形式片段"
  },

  "import{}": {
    "prefix": ["import", "jsimport"],
    "body": [
      "import { ${1:example}} from '${2}';"
    ],
    "description": "import语句"
  },
  "importdefault": {
    "prefix": ["importdefault", "jsimportdefault"],
    "body": [
      "import ${1:example} from '${2}';"
    ],
    "description": "importdefault"
  },
  "jscsfn": {
    "prefix": ["csfn", "jscsfn"],
    "body": [
      "const ${1:example} = (${2}) => {",
      "  ${3}",
      "}"
    ],
    "description": "js const定义箭头函数"
  },

  "js?": {
    "prefix": ["js?", "js3m"],
    "body": [
      "${1:example} ? ${2:example} : ${3:example}"
    ],
    "description": "js 三目运算代码段"
  },

  "ifplus": {
    "prefix": ["ifplus","jsifplus"],
    "body": [
      "// #ifdef ${1:WEB}",
      "\t$0",
      "// #endif"
    ],
    "description": "ifplus-loader专用条件编译语句"
  },
 
  "jsArraymethod": {
    "prefix": ["jsarraymethod","arraymethod","jsarray","array"],
    "body": [
      "// https://www.runoob.com/jsref/jsref-obj-array.html",
      "// concat() 连接两个或更多的数组，并返回结果。",
      "// entries() 返回数组的可迭代对象。",
      "// every() 检测数值元素的每个元素是否都符合条件。",
      "// fill() 使用一个固定值来填充数组。",
      "// filter() 检测数值元素，并返回符合条件所有元素的数组。",
      "// find() 返回符合传入测试（函数）条件的数组元素。",
      "// findIndex() 返回符合传入测试（函数）条件的数组元素索引。",
      "// forEach() 数组每个元素都执行一次回调函数。",
      "// includes() 判断一个数组是否包含一个指定的值。",
      "// indexOf() 搜索数组中的元素，并返回它所在的位置。",
      "// isArray() 判断对象是否为数组。",
      "// join() 把数组的所有元素放入一个字符串。",
      "// keys() 返回数组的可迭代对象，包含原始数组的键(key)。",
      "// map() 通过指定函数处理数组的每个元素，并返回处理后的数组。",
      "// pop() 删除数组的最后一个元素并返回删除的元素。",
      "// push() 向数组的末尾添加一个或更多元素，并返回新的长度。",
      "// reduce() 将数组元素计算为一个值（从左到右）。",
      "// reduceRight() 将数组元素计算为一个值（从右到左）。",
      "// reverse() 反转数组的元素顺序。",
      "// shift() 删除并返回数组的第一个元素。",
      "// slice() 选取数组的一部分，并返回一个新数组。",
      "// some() 检测数组元素中是否有元素符合指定条件。",
      "// sort() 对数组的元素进行排序。",
      "// splice() 从数组中添加或删除元素。",
      "// toString() 把数组转换为字符串，并返回结果。",
      "// unshift() 向数组的开头添加一个或更多元素，并返回新的长度。",
      "// from() 通过给定的对象中创建一个数组。",
      "// lastIndexOf() 搜索数组中的元素，并返回它最后出现的位置。",
      "// copyWithin() 从数组的指定位置拷贝元素到数组的另一个指定位置中。",
      "// valueOf() 返回数组对象的原始值。",
    ],
    "description": "Array常用方法列表"
  },
  
  "jsStringMethod": {
    "prefix": ["jsstringmethod", "stringmethod", "jsstring", "string"],
    "body": [
      "// https://www.runoob.com/jsref/jsref-obj-string.html",
      "// charAt() 返回在指定位置的字符。",
      "// charCodeAt() 返回在指定的位置的字符的 Unicode 编码。",
      "// concat() 连接两个或更多字符串，并返回新的字符串。",
      "// indexOf() 返回某个指定的字符串值在字符串中首次出现的位置。",
      "// includes() 查找字符串中是否包含指定的子字符串。",
      "// lastIndexOf() 从后向前搜索字符串，并从起始位置（0）开始计算返回字符串最后出现的位置。",
      "// match() 查找找到一个或多个正则表达式的匹配。",
      "// repeat() 复制字符串指定次数，并将它们连接在一起返回。",
      "// replace() 在字符串中查找匹配的子串，并替换与正则表达式匹配的子串。",
      "// replaceAll() 在字符串中查找匹配的子串，并替换与正则表达式匹配的所有子串。",
      "// search() 查找与正则表达式相匹配的值。",
      "// slice() 提取字符串的片断，并在新的字符串中返回被提取的部分。",
      "// split() 把字符串分割为字符串数组。",
      "// endsWith() 判断当前字符串是否是以指定的子字符串结尾的（区分大小写）。",
      "// startsWith() 查看字符串是否以指定的子字符串开头。",
      "// substr() 从起始索引号提取字符串中指定数目的字符。",
      "// substring() 提取字符串中两个指定的索引号之间的字符。",
      "// toLowerCase() 把字符串转换为小写。",
      "// toUpperCase() 把字符串转换为大写。",
      "// trim() 去除字符串两边的空白。",
      "// toLocaleLowerCase() 根据本地主机的语言环境把字符串转换为小写。",
      "// toLocaleUpperCase() 根据本地主机的语言环境把字符串转换为大写。",
      "// fromCharCode() 将 Unicode 编码转为字符。",
      "// valueOf() 返回某个字符串对象的原始值。",
      "// toString() 返回一个字符串。"
    ],
    "description": "String常用方法列表"
  },

  "jsMathMethod": {
    "prefix": ["jsmathmethod", "mathmethod", "jsmath", "math"],
    "body": [
      "// https://www.runoob.com/jsref/jsref-obj-math.html",
      "// abs(x) 返回 x 的绝对值。",
      "// acos(x) 返回 x 的反余弦值。",
      "// asin(x) 返回 x 的反正弦值。",
      "// atan(x) 以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。",
      "// atan2(y,x) 返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）。",
      "// ceil(x) 对数进行上舍入。",
      "// cos(x) 返回数的余弦。",
      "// exp(x) 返回 Ex 的指数。",
      "// floor(x) 对 x 进行下舍入。",
      "// log(x) 返回数的自然对数（底为e）。",
      "// max(x,y,z,...,n) 返回 x,y,z,...,n 中的最高值。",
      "// min(x,y,z,...,n) 返回 x,y,z,...,n中的最低值。",
      "// pow(x,y) 返回 x 的 y 次幂。",
      "// random() 返回 0 ~ 1 之间的随机数。",
      "// round(x) 四舍五入。",
      "// sin(x) 返回数的正弦。",
      "// sqrt(x) 返回数的平方根。",
      "// tan(x) 返回角的正切。",
      "// tanh(x) 返回一个数的双曲正切函数值。",
      "// trunc(x) 将数字的小数部分去掉，只保留整数部分。"
    ],
    "description": "Math对象常用方法"
  },

  "jsDateMethod": {
    "prefix": ["jsdatemethod", "datemethod", "jsdate", "date"],
    "body": [
      "// https://www.runoob.com/jsref/jsref-obj-date.html",
      "// getDate() 从 Date 对象返回一个月中的某一天 (1 ~ 31)。",
      "// getDay() 从 Date 对象返回一周中的某一天 (0 ~ 6)。",
      "// getFullYear() 从 Date 对象以四位数字返回年份。",
      "// getHours() 返回 Date 对象的小时 (0 ~ 23)。",
      "// getMilliseconds() 返回 Date 对象的毫秒(0 ~ 999)。",
      "// getMinutes() 返回 Date 对象的分钟 (0 ~ 59)。",
      "// getMonth() 从 Date 对象返回月份 (0 ~ 11)。",
      "// getSeconds() 返回 Date 对象的秒数 (0 ~ 59)。",
      "// getTime() 返回 1970 年 1 月 1 日至今的毫秒数。",
      "// getTimezoneOffset() 返回本地时间与格林威治标准时间 (GMT) 的分钟差。",
      "// getUTCDate() 根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。",
      "// getUTCDay() 根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。",
      "// getUTCFullYear() 根据世界时从 Date 对象返回四位数的年份。",
      "// getUTCHours() 根据世界时返回 Date 对象的小时 (0 ~ 23)。",
      "// getUTCMilliseconds() 根据世界时返回 Date 对象的毫秒(0 ~ 999)。",
      "// getUTCMinutes() 根据世界时返回 Date 对象的分钟 (0 ~ 59)。",
      "// getUTCMonth() 根据世界时从 Date 对象返回月份 (0 ~ 11)。",
      "// getUTCSeconds() 根据世界时返回 Date 对象的秒钟 (0 ~ 59)。",
      "// parse() 返回1970年1月1日午夜到指定日期（字符串）的毫秒数。",
      "// setDate() 设置 Date 对象中月的某一天 (1 ~ 31)。",
      "// setFullYear() 设置 Date 对象中的年份（四位数字）。",
      "// setHours() 设置 Date 对象中的小时 (0 ~ 23)。",
      "// setMilliseconds() 设置 Date 对象中的毫秒 (0 ~ 999)。",
      "// setMinutes() 设置 Date 对象中的分钟 (0 ~ 59)。",
      "// setMonth() 设置 Date 对象中月份 (0 ~ 11)。",
      "// setSeconds() 设置 Date 对象中的秒钟 (0 ~ 59)。",
      "// setTime() setTime() 方法以毫秒设置 Date 对象。",
      "// setUTCDate() 根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。",
      "// setUTCFullYear() 根据世界时设置 Date 对象中的年份（四位数字）。",
      "// setUTCHours() 根据世界时设置 Date 对象中的小时 (0 ~ 23)。",
      "// setUTCMilliseconds() 根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。",
      "// setUTCMinutes() 根据世界时设置 Date 对象中的分钟 (0 ~ 59)。",
      "// setUTCMonth() 根据世界时设置 Date 对象中的月份 (0 ~ 11)。",
      "// setUTCSeconds() setUTCSeconds() 方法用于根据世界时 (UTC) 设置指定时间的秒字段。",
      "// toDateString() 把 Date 对象的日期部分转换为字符串。",
      "// toISOString() 使用 ISO 标准返回字符串的日期格式。",
      "// toJSON() 以 JSON 数据格式返回日期字符串。",
      "// toLocaleDateString() 根据本地时间格式，把 Date 对象的日期部分转换为字符串。",
      "// toLocaleTimeString() 根据本地时间格式，把 Date 对象的时间部分转换为字符串。",
      "// toLocaleString() 根据本地时间格式，把 Date 对象转换为字符串。",
      "// toString() 把 Date 对象转换为字符串。",
      "// toTimeString() 把 Date 对象的时间部分转换为字符串。",
      "// toUTCString() ",
      "  // 根据世界时，把 Date 对象转换为字符串。",
      "  // 实例：",
      "  // var today = new Date();",
      "  // var UTCstring = today.toUTCString();",
      "// UTC() 根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。",
      "// valueOf() 返回 Date 对象的原始值。"
    ],
    "description": "Date常用方法"
  },
  
  "jsLocation": {
    "prefix": ["jslocation", "location"],
    "body": [
      "// hash 返回一个URL的锚部分",
      "// host 返回一个URL的主机名和端口",
      "// hostname 返回URL的主机名",
      "// href 返回完整的URL",
      "// pathname 返回的URL路径名。",
      "// port 返回一个URL服务器使用的端口号",
      "// protocol 返回一个URL协议",
      "// search 返回一个URL的查询部分",
      "// assign() 载入一个新的文档",
      "// reload() 重新载入当前文档",
      "// replace() 用新的文档替换当前文档"
    ],
    "description": "Location对象属性和方法"
  },

  "jsHistory": {
    "prefix": ["jshistory", "history"],
    "body": [
      "// length 返回历史列表中的网址数",
      "// back() 加载 history 列表中的前一个 URL",
      "// forward() 加载 history 列表中的下一个 URL",
      "// go() 加载 history 列表中的某个具体页面"
    ],
    "description": "History对象方法"
  },

  "jsDom": {
    "prefix": ["jsdom", "dom"],
    "body": [
      "// element.appendChild() 为元素添加一个新的子元素",
      "// element.attributes 返回一个元素的属性数组",
      "// element.childNodes 返回元素的一个子节点的数组，包含文本节点",
      "// element.children 返回元素的子元素的集合",
      "// element.classList 返回元素的类名，作为 DOMTokenList 对象。",
      "// element.className 设置或返回元素的class属性",
      "// element.clientTop 表示一个元素的顶部边框的宽度，以像素表示。",
      "// element.clientLeft 表示一个元素的左边框的宽度，以像素表示。",
      "// element.clientHeight 在页面上返回内容的可视高度（高度包含内边距（padding），不包含边框（border），外边距（margin）和滚动条）",
      "// element.clientWidth 在页面上返回内容的可视宽度（宽度包含内边距（padding），不包含边框（border），外边距（margin）和滚动条）",
      "// element.cloneNode() 克隆某个元素",
      "// element.compareDocumentPosition() 比较两个元素的文档位置。",
      "// element.contentEditable 设置或返回元素的内容是否可编辑",
      "// element.dir 设置或返回一个元素中的文本方向",
      "// element.firstElementChild 返回元素的第一个子元素",
      "// element.firstChild 返回元素的第一个子节点",
      "// element.focus() 设置文档或元素获取焦点",
      "// element.getAttribute() 返回指定元素的属性值",
      "// element.getElementsByTagName() 返回指定标签名的所有子元素集合。",
      "// element.getElementsByClassName() 返回文档中所有指定类名的元素集合，作为 NodeList 对象。",
      "// element.hasAttribute() 如果元素中存在指定的属性返回 true，否则返回false。",
      "// element.hasAttributes() 如果元素有任何属性返回true，否则返回false。",
      "// element.hasChildNodes() 返回一个元素是否具有任何子元素",
      "// element.hasFocus() 返回布尔值，检测文档或元素是否获取焦点",
      "// element.id 设置或者返回元素的 id。",
      "// element.innerHTML 设置或者返回元素的内容。",
      "// element.insertBefore() 现有的子元素之前插入一个新的子元素",
      "// element.isContentEditable 如果元素内容可编辑返回 true，否则返回false",
      "// element.isSupported() 如果在元素中支持指定特征返回 true。",
      "// element.lang 设置或者返回一个元素的语言。",
      "// element.lastChild 返回最后一个子节点",
      "// element.lastElementChild 返回指定元素的最后一个子元素",
      "// element.matches() 如果元素匹配指定的 CSS 选择器，matches() 方法就返回 true，否则返回 false。",
      "// element.namespaceURI 返回命名空间的 URI。",
      "// element.nextSibling 返回该元素紧跟的一个节点",
      "// element.nextElementSibling 返回指定元素之后的下一个兄弟元素（相同节点树层中的下一个元素节点）。",
      "// element.nodeName 返回元素的标记名（大写）",
      "// element.nodeType 返回元素的节点类型",
      "// element.nodeValue 返回元素的节点值",
      "// element.normalize() 使得此成为一个\"normal\"的形式，其中只有结构（如元素，注释，处理指令，CDATA节和实体引用）隔开Text节点，即元素（包括属性）下面的所有文本节点，既没有相邻的文本节点也没有空的文本节点",
      "// element.offsetHeight 返回任何一个元素的高度包括边框（border）和内边距（padding），但不包含外边距（margin）",
      "// element.offsetWidth 返回元素的宽度，包括边框（border）和内边距（padding），但不包含外边距（margin）",
      "// element.offsetLeft 返回当前元素的相对水平偏移位置的偏移容器",
      "// element.offsetParent 返回元素的偏移容器",
      "// element.offsetTop 返回当前元素的相对垂直偏移位置的偏移容器",
      "// element.ownerDocument 返回元素的根元素（文档对象）",
      "// element.parentNode 返回元素的父节点",
      "// element.previousSibling 返回某个元素紧接之前元素",
      "// element.previousElementSibling 返回指定元素的前一个兄弟元素（相同节点树层中的前一个元素节点）。",
      "// element.querySelector() 返回匹配指定 CSS 选择器元素的第一个子元素",
      "// element.querySelectorAll() 返回匹配指定 CSS 选择器元素的所有子元素节点列表",
      "// element.removeAttribute() 从元素中删除指定的属性",
      "// element.removeAttributeNode() 删除指定属性节点并返回移除后的节点。",
      "// element.removeChild() 删除一个子元素",
      "// element.removeEventListener() 移除由 addEventListener() 方法添加的事件句柄",
      "// element.replaceChild() 替换一个子元素",
      "// element.scrollHeight 返回整个元素的高度（包括带滚动条的隐蔽的地方）",
      "// element.scrollLeft 返回当前视图中的实际元素的左边缘和左边缘之间的距离",
      "// element.scrollTop 返回当前视图中的实际元素的顶部边缘和顶部边缘之间的距离",
      "// element.scrollWidth 返回元素的整个宽度（包括带滚动条的隐蔽的地方）",
      "// element.setAttribute() 设置或者改变指定属性并指定值。",
      "// element.setAttributeNode() 设置或者改变指定属性节点。",
      "// element.style 设置或返回元素的样式属性",
      "// element.tabIndex 设置或返回元素的标签顺序。",
      "// element.tagName 作为一个字符串返回某个元素的标记名（大写）",
      "// element.textContent 设置或返回一个节点和它的文本内容",
      "// element.title 设置或返回元素的title属性",
      "// element.toString() 一个元素转换成字符串",
      "// nodelist.item() 返回某个元素基于文档树的索引",
      "// nodelist.length 返回节点列表的节点数目。"
    ],
    "description": "Dom元素对象"
  },

  "jsmobile": {
    "prefix": ["jsmobile","mobile"],
    "body": [
      "// 当前设备是移动设备",
      "if (/Mobi|Android|iPhone/i.test(navigator.userAgent)) {",
      "  ",
      "};",
      "",
      "// 手机浏览器的 DOM 元素可以通过ontouchstart属性，为touch事件指定监听函数。桌面设备没有这个属性",
      "function isMobile() { ",
      "  return ('ontouchstart' in document.documentElement); ",
      "};",
      "// 也可以使用别人写好的工具包。这里推荐 react-device-detect，它支持多种粒度的设备侦测",
      "",
      "// 根据屏幕大小判断",
      "if (window.screen.width < 500) {",
      "   ",
      "};",
      "// 适合指定网页在不同宽度下的样式",
      "const getBrowserWidth = function() {",
      "  if (window.innerWidth < 768) {",
      "    return \"xs\";",
      "  } else if (window.innerWidth < 991) {",
      "    return \"sm\";",
      "  } else if (window.innerWidth < 1199) {",
      "    return \"md\";",
      "  } else {",
      "    return \"lg\";",
      "  }",
      "};"
    ],
    "description": "js判断当前是否在移动端下"
  },

  "jsrandom": {
    "prefix": ["jsrandom", "random"],
    "body": [
      "const randomInteger = (min, max) => Math.floor(Math.random() * (max - min + 1)) + min;"
    ],
    "description": "js生成随机范围内的整数"
  },

  "jstype": {
    "prefix": ["jstype", "type"],
    "body": [
      "const getType = v => v === undefined ? 'undefined' : v === null ? 'null' : v.constructor.name.toLowerCase();"
    ],
    "description": "检查JavaScript中任何变量或值的类型"
  },

  "jsurlquery": {
    "prefix": ["jsurlquery", "urlquery"],
    "body": [
      "/**",
      " * 获取url中query参数",
      " * @param {String} sUrl ",
      " * @param {String} sKey ",
      " * @returns ",
      " */",
      "function getUrlParam2(sUrl, sKey) {",
      "  var result, Oparam = {};",
      "  sUrl.replace(/[\\?&]?(\\w+)=(\\w+)/g, function (\\$0, \\$1, \\$2) {",
      "    console.log('\\$0:' + \\$0 + \"     \\$1:\" + \\$1 + \"     \\$2:\" + \\$2);",
      "    Oparam[\\$1] === void 0 ? Oparam[\\$1] = \\$2 : Oparam[\\$1] = [].concat(Oparam[\\$1], \\$2);",
      "  });",
      "  sKey === void 0 || sKey === '' ? result = Oparam : result = Oparam[sKey] || '';",
      "  return result;",
      "}"
    ],
    "description": "获取url中的query参数"
  }
}