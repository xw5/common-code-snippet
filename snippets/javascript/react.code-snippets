{
  "rinit": {
    "prefix": ["rinit", "init"],
    "body": [
      "import { useState } from 'react'",
      "import './${1:Index}.css'",
      "",
      "function ${1:Index}({initialValue}) {",
      "  const [count, setCount] = useState(initialValue)",
      "",
      "  return (",
      "    <div className=\"warp\">",
      "      <div>app:{count}</div>",
      "      <button onClick={() => setCount(count + 1)}>setCount</button>",
      "    </div>",
      "  )",
      "}",
      "",
      "export default ${1:Index}"
    ],
    "description": "reac函数组件模板代码段"
  },


  "rinitclass": {
    "prefix": ["rinitclass", "initclass"],
    "body": [
      "import React from 'react';",
      "import './${1:Index}.css';",
      "",
      "class ${1:Index} extends React.Component {",
      "  constructor(props) {",
      "    super(props);",
      "    this.state = {",
      "      title: 'Hello, world!',",
      "      date: new Date()",
      "    };",
      "    ",
      "  }",
      "",
      "  componentDidMount() {",
      "    this.timerID = setInterval(",
      "      () => this.tick(),",
      "      1000",
      "    );",
      "  }",
      "",
      "  componentWillUnmount() {",
      "    clearInterval(this.timerID);",
      "  }",
      "",
      "  tick() {",
      "    this.setState({",
      "      date: new Date()",
      "    });",
      "  }",
      "",
      "  toggleTitle= () => {",
      "    this.setState({",
      "      title: 'Hello React!'",
      "    });",
      "  }",
      "",
      "  render() {",
      "    return (",
      "      <div>",
      "        <h1 onClick={this.toggleTitle}>{title}</h1>",
      "        <h2>It is {this.props.date.toLocaleTimeString()}.</h2>",
      "      </div>",
      "    );",
      "  }",
      "}",
      "",
      "export default ${1:Index};"
    ],
    "description": "react类组件模板代码段"
  },

  "rdiv": {
    "prefix": ["rdiv" , "div"],
    "body": [
      "<${1:div} className='${2:example}'>{${3:example}}</${1:div}>"
    ],
    "description": "带className的元素代码段"
  },

  "r&&": {
    "prefix": ["r&&", "&&"],
    "body": [
      "{ ${1:isShow} && (",
      "    <div className='example'>",
      "      <h2>Hello HeHe!</h2>",
      "    </div>",
      "  )",
      "}"
    ],
    "description": "&&条件渲染"
  },

  "r?": {
    "prefix": ["r?", "r3m"],
    "body": [
      "{ ${1:isLoggedIn}",
      "  ? ${2:<LogoutButton />}",
      "  : ${3:<LoginButton />}",
      "}"
    ],
    "description": "react三目运算条件渲染"
  },

  "ron": {
    "prefix": ["ron", "on"],
    "body": [
      "${1|onClick,onDoubleClick,onMouseDown,onMouseEnter,onMouseLeave,onMouseMove,onMouseOut,onMouseOver,onMouseUp,onChange,onInput,onTouchCancel,onTouchEnd,onTouchMove,onTouchStart,onFocus,onBlur,onLoad,onError,onKeyDown,onKeyPress,onKeyUp,onDrag,onDragEnd,onDragEnter,onDragExit,onDragLeave,onDragOver,onDragStart,onDrop|}={${2:fn}}"
    ],
    "description": "react常用Dom事件"
  },

  "rhtml": {
    "prefix": ["rhtml", "html"],
    "body": [
      "dangerouslySetInnerHTML={${1:html}}"
    ],
    "description": "react html渲染"
  },

  "rstyle": {
    "prefix": ["rstyle", "style"],
    "body": [
      "style={{ height: width}}"
    ],
    "description": "react行间样式写法"
  },

  "rroot": {
    "prefix": ["rroot","root"],
    "body": [
      "<${1:React.Fragment}>",
      "  $2",
      "</${1:React.Fragment}>"
    ],
    "description": "react生成React.Fragment <>根节点"
  },

  "ruseState": {
    "prefix": ["usestate", "rusestate"],
    "body": [
      "const [${1:example}, set${1:example}] = useState($2);"
    ],
    "description": "useState片段"
  },

  "rusestatefunction": {
    "prefix": ["rusestatefunction", "usestatefunction"],
    "body": [
      "const [date, setDate] = useState(() => {",
      "  const dateObj = new Date();",
      "  console.log('-- useState init --');",
      "  return {",
      "    Y: dateObj.getFullYear(),",
      "    M: dateObj.getMonth() + 1,",
      "    D: dateObj.getDate(),",
      "    h: dateObj.getHours(),",
      "    m: dateObj.getMinutes(),",
      "    s: dateObj.getSeconds(),",
      "  }",
      "});"
    ],
    "description": "usestate函数形式片段"
  }

  "ruseeffect": {
    "prefix": ["ruseeffect", "useeffect"],
    "body": [
      "useEffect(",
      "  () => {",
      "    const subscription = props.source.subscribe();",
      "    return () => {",
      "      subscription.unsubscribe();",
      "    };",
      "  },",
      "  [${1:state}],",
      ");"
    ],
    "description": "useeffect片段"
  },

  "rusereducer": {
    "prefix": ["rusereducer", "usereducer"],
    "body": [
      "const initialState = {count: 0};",
      "function reducer(state, action) {",
      "  switch (action.type) {",
      "    case 'increment':",
      "      return {count: state.count + 1};",
      "    case 'decrement':",
      "      return {count: state.count - 1};",
      "    default:",
      "      throw new Error();",
      "  }",
      "}",
      "const [${1:state}, ${2:dispatch}] = useReducer(reducer, initialState);"
    ],
    "description": "useReducer代码段"
  },

  "ruseCallback": {
    "prefix": ["rusecallback", "usecallback"],
    "body": [
      "const ${1:memoizedCallback }= useCallback(",
      "  () => {",
      "    doSomething(a, b);",
      "  },",
      "  [a, b],",
      ");"
    ],
    "description": "useCallback代码段"
  },

  "ruseRef": {
    "prefix": ["ruseref", "useref"],
    "body": [
      "// <Input ref={inputEl} type=\"text\" /> ",
      "// inputEl.current获取节点对象",
      "const ${1:inputEl }= useRef(null);"
    ],
    "description": "useRef代码段"
  },

  "ruseContext": {
    "prefix": ["rusecontext", "usecontext"],
    "body": [
      "// 使用示例 https://zh-hans.reactjs.org/docs/hooks-reference.html#usecontext",
      "// const themes = {",
      "//  light: {",
      "//    foreground: \"#000000\",",
      "//    background: \"#eeeeee\"",
      "//  },",
      "//  dark: {",
      "//    foreground: \"#ffffff\",",
      "//    background: \"#222222\"",
      "//  }",
      "//};",
      "// const MyContext= React.createContext(themes.light);",
      "// 包裹上级注入 <MyContext.Provider value={themes.dark}></MyContext.Provider>",
      "// {theme.foreground}",
      "const ${1:theme} = useContext(${2:MyContext});"
    ],
    "description": "useContext代码段"
  },

  "rmap": {
    "prefix": ["rmap","map"],
    "body": [
      "{${1:list}.map((${2:item}, index) => {",
      "  return (",
      "    <div className='example-item' key={${2:item}.id}>",
      "      <p>{${2:item}.title}</p>",
      "    </div>",
      "  )",
      "})}"
    ],
    "description": "react map批量渲染"
  },

}